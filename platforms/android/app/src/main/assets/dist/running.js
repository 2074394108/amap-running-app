!function(t){function e(i){if(n[i])return n[i].exports;var s=n[i]={exports:{},id:i,loaded:!1};return t[i].call(s.exports,s,s.exports,e),s.loaded=!0,s.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){var i=n(27),s=n(28),a=n(29);__weex_define__("@weex-component/33d213ae1c7dedf0e9fbbab44c74105d",[],function(t,e,n){a(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=s}),__weex_bootstrap__("@weex-component/33d213ae1c7dedf0e9fbbab44c74105d",void 0,void 0)},function(t,e,n){var i=n(2),s=n(3),a=n(4);__weex_define__("@weex-component/unit",[],function(t,e,n){a(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=s})},function(t,e){t.exports={type:"div",classList:["unit-box"],children:[{type:"text",classList:["unit-number"],style:{fontSize:function(){return this.numberSize}},attr:{value:function(){return this.number}}},{type:"text",classList:["unit-text"],attr:{value:function(){return this.label}}}]}},function(t,e){t.exports={"unit-box":{flexDirection:"row",justifyContent:"center",alignItems:"flex-end"},"unit-number":{display:"inline-block",fontSize:50,color:"#111111"},"unit-text":{fontSize:22,color:"#333333",paddingLeft:20,justifyContent:"flex-end",alignItems:"flex-end"}}},function(t,e){t.exports=function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={}}},,,,function(t,e){t.exports={type:"div",classList:["message"],children:[{type:"image",shown:function(){return this.loading},classList:["loading-gif"],attr:{src:"http://img1.vued.vanthink.cn/vuedf072471d0b97d612282d1ce010cb1de1.gif"}},{type:"text",classList:["message-text"],attr:{value:function(){return this.message}}}]}},function(t,e){t.exports={message:{zIndex:2001,position:"absolute",left:30,top:30,height:60,borderRadius:30,paddingLeft:30,paddingRight:30,backgroundColor:"#ffffff",flexDirection:"row",alignItems:"center"},"message-text":{fontSize:20},"loading-gif":{width:30,height:30}}},function(t,e){t.exports=function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={}}},,,,function(t,e){t.exports={type:"div",classList:["success"],children:[{type:"div",classList:["success-data"],children:[{type:"div",classList:["distance-wrap"],children:[{type:"text",classList:["distance"],attr:{value:function(){return this.data.miles}}},{type:"text",classList:["unit"],attr:{value:"公里"}}]},{type:"div",classList:["dashboard"],children:[{type:"div",classList:["dashboard-item"],children:[{type:"div",classList:["time-wrap"],children:[{type:"text",classList:["dashboard-title"],attr:{value:"运动时间"}},{type:"text",classList:["number-lg"],attr:{value:function(){return this.data.time}}}]}]},{type:"div",classList:["dashboard-item"],children:[{type:"text",classList:["dashboard-title"],attr:{value:"热量"}},{type:"text",classList:["number-lg"],attr:{value:function(){return this.data.calories}}}]}]}]},{type:"div",style:{alignItems:"center"},children:[{type:"div",classList:["btn-leave"],events:{click:"pop"},children:[{type:"text",classList:["btn-leave-text"],attr:{value:"确认完成"}}]}]}]}},function(t,e){t.exports={success:{zIndex:2001,position:"absolute",top:0,bottom:0,left:0,right:0,backgroundColor:"rgba(0,0,0,0.85)",justifyContent:"center"},"distance-wrap":{flexDirection:"row",justifyContent:"center",alignItems:"center"},distance:{display:"inline-block",fontSize:220,color:"#ffffff"},unit:{fontSize:22,color:"#cccccc",paddingTop:30,paddingLeft:20},dashboard:{flexDirection:"row",alignItems:"center"},"dashboard-title":{color:"#999999",fontSize:25,marginBottom:20},"dashboard-item":{flex:1,paddingLeft:40,justifyContent:"center",alignItems:"center"},"number-lg":{fontSize:50,color:"#ffffff"},"btn-leave":{width:400,padding:20,marginTop:60,borderWidth:4,borderColor:"#ffffff",alignItems:"center",borderRadius:10},"btn-leave-text":{color:"#ffffff"}}},function(t,e,n){t.exports=function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n(1);var s=i("@weex-module/navigator");e.default={methods:{pop:function(){s.pop()}}}}},,,,,,,,,,function(t,e){"use strict";t.exports={calcTotal:function(t,e){var n=0;return t.forEach(function(t){n+=e?t[e]:t}),n},setTimeFormat:function(t){var e=this.setZero(Math.floor(t/3600)),n=this.setZero(Math.floor(t%3600/60)),i=this.setZero(t%60);return e+":"+n+":"+i},getDate:function(t){var e=new Date,n=("0"+e.getDate()).slice(-2)+"-"+("0"+(e.getMonth()+1)).slice(-2)+"-"+e.getFullYear()+" "+("0"+e.getHours()).slice(-2)+":"+("0"+e.getMinutes()).slice(-2);return n},setZero:function(t){return t<10?"0"+t:t},calcSpeed:function(t,e){return(t/e*3.6).toFixed(2)},extend:function(t,e){for(var n in e)try{e[n].constructor===Object?t[n]=this.extend(t[n],e[n]):t[n]=e[n]}catch(i){t[n]=e[n]}return t},setBundleUrl:function(t,e){var n=t,i="",s="",a=void 0,o=n.indexOf("your_current_IP")>=0||n.indexOf("file://assets/")>=0,r=n.indexOf("file:///")>=0&&n.indexOf("WeexDemo.app")>0;if(o)a="file://assets/";else if(r)a=n.substring(0,n.lastIndexOf("/")+1);else{var c=/\/\/([^\/]+?)\//.exec(n),u=/\/\/.+\/([^\/]+?)\//.exec(n);c&&c.length>=2&&(i=c[1]),u&&u.length>=2&&(s=u[1]),a="http://"+i+"/"}var l="./index.html?page=",d=a;d="undefined"==typeof navigator||"Mozilla"!==navigator.appCodeName&&"Gecko"!==navigator.product?a+s+"/":"web"===s||"dist"===s?l+"/dist/":l+"";var f=d+e;return f}}},function(t,e){t.exports={type:"div",classList:["container"],children:[{type:"weex-amap",id:"map2017",attr:{center:function(){return this.pos},sdkKey:function(){return this.keys},zoom:function(){return this.zoom}},classList:["map"],children:[{type:"weex-amap-polyline",attr:{path:function(){return this.runningData.path},strokeWidth:"3",stroke:"#3498db"}}]},{type:"div",classList:["map-controller"],children:[{type:"div",classList:["distance-wrap"],children:[{type:"text",classList:["distance"],attr:{value:function(){return this.zoom}}},{type:"text",classList:["unit"],attr:{value:"公里"}}]},{type:"div",classList:["dashboard"],children:[{type:"div",classList:["dashboard-item"],children:[{type:"div",classList:["time-wrap"],children:[{type:"text",classList:["dashboard-title"],attr:{value:"运动时间"}},{type:"text",classList:["number-lg"],attr:{value:function(){return this.runningData.time}}}]}]},{type:"div",classList:["dashboard-item"],children:[{type:"text",classList:["dashboard-title"],attr:{value:"配速"}},{type:"text",classList:["number-lg"],attr:{value:function(){return this.runningData.speed}}}]},{type:"div",classList:["dashboard-item"],children:[{type:"text",classList:["dashboard-title"],attr:{value:"热量"}},{type:"text",classList:["number-lg"],attr:{value:function(){return this.runningData.calories}}}]}]},{type:"div",classList:["btn-wrap"],children:[{type:"div",classList:["btn-circle","btn-green"],shown:function(){return 1==this.status},events:{click:"start"},children:[{type:"text",classList:["btn-text"],attr:{value:"开始"}}]},{type:"div",classList:["btn-circle","btn-midnight"],shown:function(){return 2==this.status||3==this.status},events:{click:"end"},children:[{type:"text",classList:["btn-text"],attr:{value:"结束"}}]},{type:"div",classList:["btn-circle","btn-green"],shown:function(){return 3==this.status},events:{click:"continue"},children:[{type:"text",classList:["btn-text"],attr:{value:"继续"}}]},{type:"div",classList:["btn-circle","btn-red"],shown:function(){return 2==this.status},events:{click:"stop"},children:[{type:"text",classList:["btn-text"],attr:{value:"暂停"}}]}]}]},{type:"div",classList:["countdown-view"],shown:function(){return this.countdown.show},children:[{type:"text",classList:["countdown-text"],attr:{value:function(){return this.countdown.text}}}]},{type:"success",shown:function(){return 4==this.status},attr:{data:function(){return this.runningData}}}]}},function(t,e){t.exports={container:{position:"relative",flex:1,minHeight:600,backgroundColor:"#eeeeee"},"countdown-view":{zIndex:2100,position:"absolute",left:0,right:0,top:0,bottom:0,backgroundColor:"#ffffff",alignItems:"center",justifyContent:"center"},"countdown-text":{color:"#ff656d",fontSize:120},map:{flex:1,minHeight:600},"map-controller":{zIndex:2e3,position:"absolute",left:0,right:0,bottom:0,height:500,backgroundColor:"rgba(255,255,255,1)",borderTopWidth:2,borderTopColor:"rgba(0,0,0,0.25)"},"distance-wrap":{flex:1,flexDirection:"row",justifyContent:"center",alignItems:"center"},distance:{display:"inline-block",fontSize:90,color:"#111111"},unit:{fontSize:22,color:"#333333",paddingTop:30,paddingLeft:20},dashboard:{flex:1,flexDirection:"row"},"dashboard-title":{color:"#999999",fontSize:25,marginBottom:20},"dashboard-item":{flex:1,paddingLeft:40,justifyContent:"center"},"number-lg":{fontSize:42,color:"#222222"},"btn-wrap":{flex:1,flexDirection:"row",alignItems:"center",justifyContent:"center"},"btn-circle":{width:120,height:120,marginLeft:40,marginRight:40,borderRadius:120,alignItems:"center",justifyContent:"center",backgroundColor:"#eeeeee"},"btn-text":{color:"#ffffff",fontSize:20},"btn-red":{backgroundColor:"#ff626d"},"btn-green":{backgroundColor:"#21d45f"},"btn-midnight":{backgroundColor:"#34495e"}}},function(t,e,n){t.exports=function(t,e,i){"use strict";function s(t){return t&&t.__esModule?t:{default:t}}var a=n(30),o=s(a),r=n(26),c=n(33);n(34),n(1),n(35);var u=i("@weex-module/storage"),l=i("@weex-module/amap");t.exports={data:function(){return{keys:{h5:"f4b99dcd51752142ec0f1bdcb9a8ec02",ios:"c551f83e1e5b19af89c74096f1c0f007",android:"db6a973159cb0c2639ad02c617a786ae"},zoom:18,pos:[123,33],status:c.RUNNING_READY,runningData:{distance:0,miles:0,path:[],time:"00:00:00",seconds:0,speed:0,calories:0},message:"正在运行",countdown:{text:"3",show:!1},timeRecorder:null,amapRecorder:null}},methods:{start:function(){this.status=c.RUNNING_DOING,this.countdown.show=!0,this.countDownTime(),this.runningAmapGeolocation()},stop:function(){this.statsu=c.RUNNING_PAUSE,clearInterval(this.timeRecorder),clearInterval(this.amapRecorder)},continue:function(){this.status=c.RUNNING_DOING,this.countDownTime(),this.runningAmapGeolocation()},end:function(){clearInterval(this.timeRecorder),clearInterval(this.amapRecorder);var t=this;console.log(1),u.getItem("runningData",function(e){var n=[];"success"==e.result&&(n=e.data),"string"==typeof n&&(n=JSON.parse(n)),n.unshift(r.extend({date:r.getDate().replace(/\s./,""),standrandDate:r.getDate()},t.runningData)),console.log(n),u.setItem("runningData",(0,o.default)(n),function(e){"success"==e.result&&(t.status=c.RUNNING_END)})})},setUserLocation:function(t){l.getUserLocation(this.$el("map2017").ref,t)},countDownTime:function(){var t=this;this.status==c.RUNNING_DOING&&(this.countdown.show=!0),this.timeRecorder=setInterval(function(){t.runningData.seconds++,t.runningData.seconds<=4&&(3==t.runningData.seconds?t.countdown.text="GO!":4==t.runningData.seconds?t.countdown.show=!1:t.countdown.text=3-t.runningData.seconds),t.runningData.time=r.setTimeFormat(t.runningData.seconds)},1e3)},runningAmapGeolocation:function(){var t=this;this.setUserLocation(function(e){"success"==e.result&&(t.pos=e.data.position,t.runningData.path.push(e.data.position))}),this.amapRecorder=setInterval(function(){t.setUserLocation(function(e){"success"==e.result&&(t.pos=e.data.position,t.runningData.path.push(e.data.position),t.calcDistanceAndSpeed())})},1e4)},calcDistanceAndSpeed:function(){var t=this,e=this.runningData.path.length;e>1&&l.getLineDistance(this.runningData.path[e-1],this.runningData.path[e-2],function(e){"success"==e.result&&(t.runningData.distance+=e.data.distance,t.runningData.miles=t.runningData.distance.toFixed(2)),t.runningData.calories=(t.runningData.distance/1e3).toFixed(2),t.runningData.speed=r.calcSpeed(t.runningData.distance,t.runningData.seconds)})}}}}},function(t,e,n){t.exports={default:n(31),__esModule:!0}},function(t,e,n){var i=n(32),s=i.JSON||(i.JSON={stringify:JSON.stringify});t.exports=function(t){return s.stringify.apply(s,arguments)}},function(t,e){var n=t.exports={version:"2.4.0"};"number"==typeof __e&&(__e=n)},function(t,e){"use strict";t.exports={RUNNING_READY:1,RUNNING_DOING:2,RUNNING_PAUSE:3,RUNNING_END:4}},function(t,e,n){var i=n(8),s=n(9),a=n(10);__weex_define__("@weex-component/message",[],function(t,e,n){a(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=s})},function(t,e,n){var i=n(14),s=n(15),a=n(16);__weex_define__("@weex-component/success",[],function(t,e,n){a(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=s})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vcnVubmluZy5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgMmQxMTU3NzcxNjBiMjExYmI0ZTk/YTI2YioqKioqIiwid2VicGFjazovLy8uL3NyYy9ydW5uaW5nLndlP2YyYmQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luY2x1ZGUvdW5pdC53ZT9jOTU0KioiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luY2x1ZGUvdW5pdC53ZT9mMjY5KioqKiIsIndlYnBhY2s6Ly8vLi9zcmMvaW5jbHVkZS91bml0LndlP2VmZmQqKioqIiwid2VicGFjazovLy8uL3NyYy9pbmNsdWRlL21lc3NhZ2Uud2U/MWE1YioiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luY2x1ZGUvbWVzc2FnZS53ZT8wYjBmKiIsIndlYnBhY2s6Ly8vLi9zcmMvaW5jbHVkZS9zdWNjZXNzLndlPzVkMjAqIiwid2VicGFjazovLy8uL3NyYy9pbmNsdWRlL3N1Y2Nlc3Mud2U/NGZiYSoiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luY2x1ZGUvc3VjY2Vzcy53ZT8xMTA4Iiwid2VicGFjazovLy8uL3NyYy9saWIvdXRpbHMuanM/OWZkZSIsIndlYnBhY2s6Ly8vLi9zcmMvcnVubmluZy53ZT81MTQxIiwid2VicGFjazovLy8uL3NyYy9ydW5uaW5nLndlP2ZkOTAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3J1bm5pbmcud2UiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliL3N0YXR1cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5jbHVkZS9tZXNzYWdlLndlIiwid2VicGFjazovLy8uL3NyYy9pbmNsdWRlL3N1Y2Nlc3Mud2U/ZmY4NyJdLCJuYW1lcyI6WyJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImV4cG9ydHMiLCJtb2R1bGUiLCJpZCIsImxvYWRlZCIsImNhbGwiLCJtIiwiYyIsInAiLCJfX3dlZXhfdGVtcGxhdGVfXyIsIl9fd2VleF9zdHlsZV9fIiwiX193ZWV4X3NjcmlwdF9fIiwiX193ZWV4X2RlZmluZV9fIiwiX193ZWV4X3JlcXVpcmVfXyIsIl9fd2VleF9leHBvcnRzX18iLCJfX3dlZXhfbW9kdWxlX18iLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInRlbXBsYXRlIiwic3R5bGUiLCJfX3dlZXhfYm9vdHN0cmFwX18iLCJ1bmRlZmluZWQiLCJ0eXBlIiwiY2xhc3NMaXN0IiwiY2hpbGRyZW4iLCJmb250U2l6ZSIsInRoaXMiLCJudW1iZXJTaXplIiwiYXR0ciIsInZhbHVlIiwibnVtYmVyIiwibGFiZWwiLCJ1bml0LWJveCIsImZsZXhEaXJlY3Rpb24iLCJqdXN0aWZ5Q29udGVudCIsImFsaWduSXRlbXMiLCJ1bml0LW51bWJlciIsImRpc3BsYXkiLCJjb2xvciIsInVuaXQtdGV4dCIsInBhZGRpbmdMZWZ0IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJzaG93biIsImxvYWRpbmciLCJzcmMiLCJtZXNzYWdlIiwiekluZGV4IiwicG9zaXRpb24iLCJsZWZ0IiwidG9wIiwiaGVpZ2h0IiwiYm9yZGVyUmFkaXVzIiwicGFkZGluZ1JpZ2h0IiwiYmFja2dyb3VuZENvbG9yIiwibWVzc2FnZS10ZXh0IiwibG9hZGluZy1naWYiLCJ3aWR0aCIsImRhdGEiLCJtaWxlcyIsInRpbWUiLCJjYWxvcmllcyIsImV2ZW50cyIsImNsaWNrIiwic3VjY2VzcyIsImJvdHRvbSIsInJpZ2h0IiwiZGlzdGFuY2Utd3JhcCIsImRpc3RhbmNlIiwidW5pdCIsInBhZGRpbmdUb3AiLCJkYXNoYm9hcmQiLCJkYXNoYm9hcmQtdGl0bGUiLCJtYXJnaW5Cb3R0b20iLCJkYXNoYm9hcmQtaXRlbSIsImZsZXgiLCJudW1iZXItbGciLCJidG4tbGVhdmUiLCJwYWRkaW5nIiwibWFyZ2luVG9wIiwiYm9yZGVyV2lkdGgiLCJib3JkZXJDb2xvciIsImJ0bi1sZWF2ZS10ZXh0IiwibmF2aWdhdG9yIiwibWV0aG9kcyIsInBvcCIsImNhbGNUb3RhbCIsImFyciIsImsiLCJzdW0iLCJmb3JFYWNoIiwiaXRlbSIsInNldFRpbWVGb3JtYXQiLCJoIiwic2V0WmVybyIsIk1hdGgiLCJmbG9vciIsImkiLCJzIiwiZ2V0RGF0ZSIsImQiLCJEYXRlIiwiZGF0ZXN0cmluZyIsInNsaWNlIiwiZ2V0TW9udGgiLCJnZXRGdWxsWWVhciIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImNhbGNTcGVlZCIsInRvRml4ZWQiLCJleHRlbmQiLCJvYmoxIiwib2JqMiIsImNvbnN0cnVjdG9yIiwiZSIsInNldEJ1bmRsZVVybCIsInVybCIsImpzRmlsZSIsImJ1bmRsZVVybCIsImhvc3QiLCJwYXRoIiwibmF0aXZlQmFzZSIsImlzQW5kcm9pZEFzc2V0cyIsImluZGV4T2YiLCJpc2lPU0Fzc2V0cyIsInN1YnN0cmluZyIsImxhc3RJbmRleE9mIiwibWF0Y2hlcyIsImV4ZWMiLCJtYXRjaEZpcnN0UGF0aCIsImxlbmd0aCIsImg1QmFzZSIsImJhc2UiLCJhcHBDb2RlTmFtZSIsInByb2R1Y3QiLCJuZXdVcmwiLCJjZW50ZXIiLCJwb3MiLCJzZGtLZXkiLCJrZXlzIiwiem9vbSIsInJ1bm5pbmdEYXRhIiwic3Ryb2tlV2lkdGgiLCJzdHJva2UiLCJzcGVlZCIsInN0YXR1cyIsImNvdW50ZG93biIsInNob3ciLCJ0ZXh0IiwiY29udGFpbmVyIiwibWluSGVpZ2h0IiwiY291bnRkb3duLXZpZXciLCJjb3VudGRvd24tdGV4dCIsIm1hcCIsIm1hcC1jb250cm9sbGVyIiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJUb3BDb2xvciIsImJ0bi13cmFwIiwiYnRuLWNpcmNsZSIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsImJ0bi10ZXh0IiwiYnRuLXJlZCIsImJ0bi1ncmVlbiIsImJ0bi1taWRuaWdodCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfc3RyaW5naWZ5IiwiX3N0cmluZ2lmeTIiLCJ1dGlscyIsInN0b3JhZ2UiLCJBbWFwIiwiaDUiLCJpb3MiLCJhbmRyb2lkIiwic2Vjb25kcyIsInRpbWVSZWNvcmRlciIsImFtYXBSZWNvcmRlciIsInN0YXJ0IiwiUlVOTklOR19ET0lORyIsImNvdW50RG93blRpbWUiLCJydW5uaW5nQW1hcEdlb2xvY2F0aW9uIiwic3RvcCIsInN0YXRzdSIsIlJVTk5JTkdfUEFVU0UiLCJjbGVhckludGVydmFsIiwiY29udGludWUiLCJlbmQiLCJzZWxmIiwiY29uc29sZSIsImxvZyIsImdldEl0ZW0iLCJyZXMiLCJyZXN1bHQiLCJKU09OIiwicGFyc2UiLCJ1bnNoaWZ0IiwiZGF0ZSIsInJlcGxhY2UiLCJzdGFuZHJhbmREYXRlIiwic2V0SXRlbSIsIlJVTk5JTkdfRU5EIiwic2V0VXNlckxvY2F0aW9uIiwiY2FsbGJhY2siLCJnZXRVc2VyTG9jYXRpb24iLCIkZWwiLCJyZWYiLCJfdGhpcyIsInNldEludGVydmFsIiwiX3RoaXMyIiwicHVzaCIsImNhbGNEaXN0YW5jZUFuZFNwZWVkIiwiX3RoaXMzIiwibGVuIiwiZ2V0TGluZURpc3RhbmNlIiwiY29yZSIsIiRKU09OIiwic3RyaW5naWZ5IiwiaXQiLCJhcHBseSIsImFyZ3VtZW50cyIsInZlcnNpb24iLCJfX2UiLCJSVU5OSU5HX1JFQURZIl0sIm1hcHBpbmdzIjoiQ0FBUyxTQUFVQSxHQ0luQixRQUFBQyxHQUFBQyxHQUdBLEdBQUFDLEVBQUFELEdBQ0EsTUFBQUMsR0FBQUQsR0FBQUUsT0FHQSxJQUFBQyxHQUFBRixFQUFBRCxJQUNBRSxXQUNBRSxHQUFBSixFQUNBSyxRQUFBLEVBVUEsT0FOQVAsR0FBQUUsR0FBQU0sS0FBQUgsRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUgsR0FHQUksRUFBQUUsUUFBQSxF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SSxFQUFPRCxRQUFVLFNBQVNDLEVBQVFELEVBQVNZLEdBQWtCLFlBTTdELFNBQVN3SixHQUF1QkMsR0FBTyxNQUFPQSxJQUFPQSxFQUFJdEosV0FBYXNKLEdBQVFySixRQUFTcUosR0FKdkYsR0FBSUMsR0FBYXpLLEVBQW9CLElBRWpDMEssRUFBY0gsRUFBdUJFLEdjMXlCMUNFLEVBQUEzSyxFQUNBLElkOHlCS21KLEVBQVNuSixFYzd5QmQsR2Q4eUJDQSxHYzd5QkQsSWQ4eUJDQSxFYzd5QkQsR2Q4eUJDQSxFYzd5QkQsR2Q4eUJDLElBQUk0SyxHQUFVN0osRWM3eUJmLHdCZDh5Qks4SixFQUFPOUosRWM1eUJaLG9CZDh5QkNYLEdBQU9ELFNBQ0x5RCxLQUFNLFdBQWEsT0FDakJpRixNQUNFaUMsR2M3eUJQLG1DZDh5Qk9DLEljN3lCUCxtQ2Q4eUJPQyxRYzV5QlAsb0NkOHlCS2xDLEtjN3lCTCxHZDh5QktILEtBQU0sSWM3eUJYLElkOHlCS1EsT0FBUUEsRWM3eUJiLGNkOHlCS0osYUFDRXpFLFNjN3lCUCxFZDh5Qk9ULE1jN3lCUCxFZDh5Qk82RCxRQUNBNUQsS2M3eUJQLFdkOHlCT21ILFFjN3lCUCxFZDh5Qk8vQixNYzd5QlAsRWQ4eUJPbkYsU2M1eUJQLEdkOHlCS2YsUWM3eUJMLE9kOHlCS29HLFdBQ0VFLEtjN3lCUCxJZDh5Qk9ELE1jM3lCUCxHZDh5Qks2QixhYzd5QkwsS2Q4eUJLQyxhYzF5QkwsT2Q4eUJHN0YsU0FDRThGLE1BQU8sV0FDTHhKLEtBQUt1SCxPQUFTQSxFYzd5QnJCa0MsY2Q4eUJPekosS0FBS3dILFVBQVVDLE1jN3lCdEIsRWQ4eUJPekgsS2M3eUJQMEosZ0JkOHlCTzFKLEtjN3lCUDJKLDBCZCt5QktDLEtBQU0sV0FDSjVKLEtBQUs2SixPQUFTdEMsRWM1eUJyQnVDLGNkNnlCT0MsY0FBYy9KLEtjNXlCckJzSixjZDZ5Qk9TLGNBQWMvSixLYzV5QnJCdUosZWQ4eUJLUyxTQUFVLFdBQ1JoSyxLQUFLdUgsT0FBU0EsRWM1eUJyQmtDLGNkNnlCT3pKLEtjNXlCUDBKLGdC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ZXNDb250ZW50IjpbIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIF9fd2VleF90ZW1wbGF0ZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNylcblx0dmFyIF9fd2VleF9zdHlsZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOClcblx0dmFyIF9fd2VleF9zY3JpcHRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpXG5cdFxuXHRfX3dlZXhfZGVmaW5lX18oJ0B3ZWV4LWNvbXBvbmVudC8zM2QyMTNhZTFjN2RlZGYwZTlmYmJhYjQ0Yzc0MTA1ZCcsIFtdLCBmdW5jdGlvbihfX3dlZXhfcmVxdWlyZV9fLCBfX3dlZXhfZXhwb3J0c19fLCBfX3dlZXhfbW9kdWxlX18pIHtcblx0XG5cdCAgICBfX3dlZXhfc2NyaXB0X18oX193ZWV4X21vZHVsZV9fLCBfX3dlZXhfZXhwb3J0c19fLCBfX3dlZXhfcmVxdWlyZV9fKVxuXHQgICAgaWYgKF9fd2VleF9leHBvcnRzX18uX19lc01vZHVsZSAmJiBfX3dlZXhfZXhwb3J0c19fLmRlZmF1bHQpIHtcblx0ICAgICAgX193ZWV4X21vZHVsZV9fLmV4cG9ydHMgPSBfX3dlZXhfZXhwb3J0c19fLmRlZmF1bHRcblx0ICAgIH1cblx0XG5cdCAgICBfX3dlZXhfbW9kdWxlX18uZXhwb3J0cy50ZW1wbGF0ZSA9IF9fd2VleF90ZW1wbGF0ZV9fXG5cdFxuXHQgICAgX193ZWV4X21vZHVsZV9fLmV4cG9ydHMuc3R5bGUgPSBfX3dlZXhfc3R5bGVfX1xuXHRcblx0fSlcblx0XG5cdF9fd2VleF9ib290c3RyYXBfXygnQHdlZXgtY29tcG9uZW50LzMzZDIxM2FlMWM3ZGVkZjBlOWZiYmFiNDRjNzQxMDVkJyx1bmRlZmluZWQsdW5kZWZpbmVkKVxuXG4vKioqLyB9LFxuLyogMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIF9fd2VleF90ZW1wbGF0ZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKVxuXHR2YXIgX193ZWV4X3N0eWxlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpXG5cdHZhciBfX3dlZXhfc2NyaXB0X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpXG5cdFxuXHRfX3dlZXhfZGVmaW5lX18oJ0B3ZWV4LWNvbXBvbmVudC91bml0JywgW10sIGZ1bmN0aW9uKF9fd2VleF9yZXF1aXJlX18sIF9fd2VleF9leHBvcnRzX18sIF9fd2VleF9tb2R1bGVfXykge1xuXHRcblx0ICAgIF9fd2VleF9zY3JpcHRfXyhfX3dlZXhfbW9kdWxlX18sIF9fd2VleF9leHBvcnRzX18sIF9fd2VleF9yZXF1aXJlX18pXG5cdCAgICBpZiAoX193ZWV4X2V4cG9ydHNfXy5fX2VzTW9kdWxlICYmIF9fd2VleF9leHBvcnRzX18uZGVmYXVsdCkge1xuXHQgICAgICBfX3dlZXhfbW9kdWxlX18uZXhwb3J0cyA9IF9fd2VleF9leHBvcnRzX18uZGVmYXVsdFxuXHQgICAgfVxuXHRcblx0ICAgIF9fd2VleF9tb2R1bGVfXy5leHBvcnRzLnRlbXBsYXRlID0gX193ZWV4X3RlbXBsYXRlX19cblx0XG5cdCAgICBfX3dlZXhfbW9kdWxlX18uZXhwb3J0cy5zdHlsZSA9IF9fd2VleF9zdHlsZV9fXG5cdFxuXHR9KVxuXG5cbi8qKiovIH0sXG4vKiAyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IHtcblx0ICBcInR5cGVcIjogXCJkaXZcIixcblx0ICBcImNsYXNzTGlzdFwiOiBbXG5cdCAgICBcInVuaXQtYm94XCJcblx0ICBdLFxuXHQgIFwiY2hpbGRyZW5cIjogW1xuXHQgICAge1xuXHQgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG5cdCAgICAgIFwiY2xhc3NMaXN0XCI6IFtcblx0ICAgICAgICBcInVuaXQtbnVtYmVyXCJcblx0ICAgICAgXSxcblx0ICAgICAgXCJzdHlsZVwiOiB7XG5cdCAgICAgICAgXCJmb250U2l6ZVwiOiBmdW5jdGlvbiAoKSB7cmV0dXJuIHRoaXMubnVtYmVyU2l6ZX1cblx0ICAgICAgfSxcblx0ICAgICAgXCJhdHRyXCI6IHtcblx0ICAgICAgICBcInZhbHVlXCI6IGZ1bmN0aW9uICgpIHtyZXR1cm4gdGhpcy5udW1iZXJ9XG5cdCAgICAgIH1cblx0ICAgIH0sXG5cdCAgICB7XG5cdCAgICAgIFwidHlwZVwiOiBcInRleHRcIixcblx0ICAgICAgXCJjbGFzc0xpc3RcIjogW1xuXHQgICAgICAgIFwidW5pdC10ZXh0XCJcblx0ICAgICAgXSxcblx0ICAgICAgXCJhdHRyXCI6IHtcblx0ICAgICAgICBcInZhbHVlXCI6IGZ1bmN0aW9uICgpIHtyZXR1cm4gdGhpcy5sYWJlbH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIF1cblx0fVxuXG4vKioqLyB9LFxuLyogMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSB7XG5cdCAgXCJ1bml0LWJveFwiOiB7XG5cdCAgICBcImZsZXhEaXJlY3Rpb25cIjogXCJyb3dcIixcblx0ICAgIFwianVzdGlmeUNvbnRlbnRcIjogXCJjZW50ZXJcIixcblx0ICAgIFwiYWxpZ25JdGVtc1wiOiBcImZsZXgtZW5kXCJcblx0ICB9LFxuXHQgIFwidW5pdC1udW1iZXJcIjoge1xuXHQgICAgXCJkaXNwbGF5XCI6IFwiaW5saW5lLWJsb2NrXCIsXG5cdCAgICBcImZvbnRTaXplXCI6IDUwLFxuXHQgICAgXCJjb2xvclwiOiBcIiMxMTExMTFcIlxuXHQgIH0sXG5cdCAgXCJ1bml0LXRleHRcIjoge1xuXHQgICAgXCJmb250U2l6ZVwiOiAyMixcblx0ICAgIFwiY29sb3JcIjogXCIjMzMzMzMzXCIsXG5cdCAgICBcInBhZGRpbmdMZWZ0XCI6IDIwLFxuXHQgICAgXCJqdXN0aWZ5Q29udGVudFwiOiBcImZsZXgtZW5kXCIsXG5cdCAgICBcImFsaWduSXRlbXNcIjogXCJmbGV4LWVuZFwiXG5cdCAgfVxuXHR9XG5cbi8qKiovIH0sXG4vKiA0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWV4X3JlcXVpcmVfXyl7XCJ1c2Ugc3RyaWN0XCI7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuZGVmYXVsdCA9IHt9O31cblx0LyogZ2VuZXJhdGVkIGJ5IHdlZXgtbG9hZGVyICovXG5cblxuLyoqKi8gfSxcbi8qIDUgKi8sXG4vKiA2ICovLFxuLyogNyAqLyxcbi8qIDggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0ge1xuXHQgIFwidHlwZVwiOiBcImRpdlwiLFxuXHQgIFwiY2xhc3NMaXN0XCI6IFtcblx0ICAgIFwibWVzc2FnZVwiXG5cdCAgXSxcblx0ICBcImNoaWxkcmVuXCI6IFtcblx0ICAgIHtcblx0ICAgICAgXCJ0eXBlXCI6IFwiaW1hZ2VcIixcblx0ICAgICAgXCJzaG93blwiOiBmdW5jdGlvbiAoKSB7cmV0dXJuIHRoaXMubG9hZGluZ30sXG5cdCAgICAgIFwiY2xhc3NMaXN0XCI6IFtcblx0ICAgICAgICBcImxvYWRpbmctZ2lmXCJcblx0ICAgICAgXSxcblx0ICAgICAgXCJhdHRyXCI6IHtcblx0ICAgICAgICBcInNyY1wiOiBcImh0dHA6Ly9pbWcxLnZ1ZWQudmFudGhpbmsuY24vdnVlZGYwNzI0NzFkMGI5N2Q2MTIyODJkMWNlMDEwY2IxZGUxLmdpZlwiXG5cdCAgICAgIH1cblx0ICAgIH0sXG5cdCAgICB7XG5cdCAgICAgIFwidHlwZVwiOiBcInRleHRcIixcblx0ICAgICAgXCJjbGFzc0xpc3RcIjogW1xuXHQgICAgICAgIFwibWVzc2FnZS10ZXh0XCJcblx0ICAgICAgXSxcblx0ICAgICAgXCJhdHRyXCI6IHtcblx0ICAgICAgICBcInZhbHVlXCI6IGZ1bmN0aW9uICgpIHtyZXR1cm4gdGhpcy5tZXNzYWdlfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgXVxuXHR9XG5cbi8qKiovIH0sXG4vKiA5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IHtcblx0ICBcIm1lc3NhZ2VcIjoge1xuXHQgICAgXCJ6SW5kZXhcIjogMjAwMSxcblx0ICAgIFwicG9zaXRpb25cIjogXCJhYnNvbHV0ZVwiLFxuXHQgICAgXCJsZWZ0XCI6IDMwLFxuXHQgICAgXCJ0b3BcIjogMzAsXG5cdCAgICBcImhlaWdodFwiOiA2MCxcblx0ICAgIFwiYm9yZGVyUmFkaXVzXCI6IDMwLFxuXHQgICAgXCJwYWRkaW5nTGVmdFwiOiAzMCxcblx0ICAgIFwicGFkZGluZ1JpZ2h0XCI6IDMwLFxuXHQgICAgXCJiYWNrZ3JvdW5kQ29sb3JcIjogXCIjZmZmZmZmXCIsXG5cdCAgICBcImZsZXhEaXJlY3Rpb25cIjogXCJyb3dcIixcblx0ICAgIFwiYWxpZ25JdGVtc1wiOiBcImNlbnRlclwiXG5cdCAgfSxcblx0ICBcIm1lc3NhZ2UtdGV4dFwiOiB7XG5cdCAgICBcImZvbnRTaXplXCI6IDIwXG5cdCAgfSxcblx0ICBcImxvYWRpbmctZ2lmXCI6IHtcblx0ICAgIFwid2lkdGhcIjogMzAsXG5cdCAgICBcImhlaWdodFwiOiAzMFxuXHQgIH1cblx0fVxuXG4vKioqLyB9LFxuLyogMTAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlZXhfcmVxdWlyZV9fKXtcInVzZSBzdHJpY3RcIjtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5kZWZhdWx0ID0ge307fVxuXHQvKiBnZW5lcmF0ZWQgYnkgd2VleC1sb2FkZXIgKi9cblxuXG4vKioqLyB9LFxuLyogMTEgKi8sXG4vKiAxMiAqLyxcbi8qIDEzICovLFxuLyogMTQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0ge1xuXHQgIFwidHlwZVwiOiBcImRpdlwiLFxuXHQgIFwiY2xhc3NMaXN0XCI6IFtcblx0ICAgIFwic3VjY2Vzc1wiXG5cdCAgXSxcblx0ICBcImNoaWxkcmVuXCI6IFtcblx0ICAgIHtcblx0ICAgICAgXCJ0eXBlXCI6IFwiZGl2XCIsXG5cdCAgICAgIFwiY2xhc3NMaXN0XCI6IFtcblx0ICAgICAgICBcInN1Y2Nlc3MtZGF0YVwiXG5cdCAgICAgIF0sXG5cdCAgICAgIFwiY2hpbGRyZW5cIjogW1xuXHQgICAgICAgIHtcblx0ICAgICAgICAgIFwidHlwZVwiOiBcImRpdlwiLFxuXHQgICAgICAgICAgXCJjbGFzc0xpc3RcIjogW1xuXHQgICAgICAgICAgICBcImRpc3RhbmNlLXdyYXBcIlxuXHQgICAgICAgICAgXSxcblx0ICAgICAgICAgIFwiY2hpbGRyZW5cIjogW1xuXHQgICAgICAgICAgICB7XG5cdCAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuXHQgICAgICAgICAgICAgIFwiY2xhc3NMaXN0XCI6IFtcblx0ICAgICAgICAgICAgICAgIFwiZGlzdGFuY2VcIlxuXHQgICAgICAgICAgICAgIF0sXG5cdCAgICAgICAgICAgICAgXCJhdHRyXCI6IHtcblx0ICAgICAgICAgICAgICAgIFwidmFsdWVcIjogZnVuY3Rpb24gKCkge3JldHVybiB0aGlzLmRhdGEubWlsZXN9XG5cdCAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICB7XG5cdCAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuXHQgICAgICAgICAgICAgIFwiY2xhc3NMaXN0XCI6IFtcblx0ICAgICAgICAgICAgICAgIFwidW5pdFwiXG5cdCAgICAgICAgICAgICAgXSxcblx0ICAgICAgICAgICAgICBcImF0dHJcIjoge1xuXHQgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuWFrOmHjFwiXG5cdCAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICBdXG5cdCAgICAgICAgfSxcblx0ICAgICAgICB7XG5cdCAgICAgICAgICBcInR5cGVcIjogXCJkaXZcIixcblx0ICAgICAgICAgIFwiY2xhc3NMaXN0XCI6IFtcblx0ICAgICAgICAgICAgXCJkYXNoYm9hcmRcIlxuXHQgICAgICAgICAgXSxcblx0ICAgICAgICAgIFwiY2hpbGRyZW5cIjogW1xuXHQgICAgICAgICAgICB7XG5cdCAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZGl2XCIsXG5cdCAgICAgICAgICAgICAgXCJjbGFzc0xpc3RcIjogW1xuXHQgICAgICAgICAgICAgICAgXCJkYXNoYm9hcmQtaXRlbVwiXG5cdCAgICAgICAgICAgICAgXSxcblx0ICAgICAgICAgICAgICBcImNoaWxkcmVuXCI6IFtcblx0ICAgICAgICAgICAgICAgIHtcblx0ICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZGl2XCIsXG5cdCAgICAgICAgICAgICAgICAgIFwiY2xhc3NMaXN0XCI6IFtcblx0ICAgICAgICAgICAgICAgICAgICBcInRpbWUtd3JhcFwiXG5cdCAgICAgICAgICAgICAgICAgIF0sXG5cdCAgICAgICAgICAgICAgICAgIFwiY2hpbGRyZW5cIjogW1xuXHQgICAgICAgICAgICAgICAgICAgIHtcblx0ICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcblx0ICAgICAgICAgICAgICAgICAgICAgIFwiY2xhc3NMaXN0XCI6IFtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgXCJkYXNoYm9hcmQtdGl0bGVcIlxuXHQgICAgICAgICAgICAgICAgICAgICAgXSxcblx0ICAgICAgICAgICAgICAgICAgICAgIFwiYXR0clwiOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIFwidmFsdWVcIjogXCLov5Dliqjml7bpl7RcIlxuXHQgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgICAgICAge1xuXHQgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuXHQgICAgICAgICAgICAgICAgICAgICAgXCJjbGFzc0xpc3RcIjogW1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBcIm51bWJlci1sZ1wiXG5cdCAgICAgICAgICAgICAgICAgICAgICBdLFxuXHQgICAgICAgICAgICAgICAgICAgICAgXCJhdHRyXCI6IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBmdW5jdGlvbiAoKSB7cmV0dXJuIHRoaXMuZGF0YS50aW1lfVxuXHQgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgXVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgIF1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAge1xuXHQgICAgICAgICAgICAgIFwidHlwZVwiOiBcImRpdlwiLFxuXHQgICAgICAgICAgICAgIFwiY2xhc3NMaXN0XCI6IFtcblx0ICAgICAgICAgICAgICAgIFwiZGFzaGJvYXJkLWl0ZW1cIlxuXHQgICAgICAgICAgICAgIF0sXG5cdCAgICAgICAgICAgICAgXCJjaGlsZHJlblwiOiBbXG5cdCAgICAgICAgICAgICAgICB7XG5cdCAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcblx0ICAgICAgICAgICAgICAgICAgXCJjbGFzc0xpc3RcIjogW1xuXHQgICAgICAgICAgICAgICAgICAgIFwiZGFzaGJvYXJkLXRpdGxlXCJcblx0ICAgICAgICAgICAgICAgICAgXSxcblx0ICAgICAgICAgICAgICAgICAgXCJhdHRyXCI6IHtcblx0ICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IFwi54Ot6YePXCJcblx0ICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgICAgIHtcblx0ICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuXHQgICAgICAgICAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG5cdCAgICAgICAgICAgICAgICAgICAgXCJudW1iZXItbGdcIlxuXHQgICAgICAgICAgICAgICAgICBdLFxuXHQgICAgICAgICAgICAgICAgICBcImF0dHJcIjoge1xuXHQgICAgICAgICAgICAgICAgICAgIFwidmFsdWVcIjogZnVuY3Rpb24gKCkge3JldHVybiB0aGlzLmRhdGEuY2Fsb3JpZXN9XG5cdCAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICBdXG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIF1cblx0ICAgICAgICB9XG5cdCAgICAgIF1cblx0ICAgIH0sXG5cdCAgICB7XG5cdCAgICAgIFwidHlwZVwiOiBcImRpdlwiLFxuXHQgICAgICBcInN0eWxlXCI6IHtcblx0ICAgICAgICBcImFsaWduSXRlbXNcIjogXCJjZW50ZXJcIlxuXHQgICAgICB9LFxuXHQgICAgICBcImNoaWxkcmVuXCI6IFtcblx0ICAgICAgICB7XG5cdCAgICAgICAgICBcInR5cGVcIjogXCJkaXZcIixcblx0ICAgICAgICAgIFwiY2xhc3NMaXN0XCI6IFtcblx0ICAgICAgICAgICAgXCJidG4tbGVhdmVcIlxuXHQgICAgICAgICAgXSxcblx0ICAgICAgICAgIFwiZXZlbnRzXCI6IHtcblx0ICAgICAgICAgICAgXCJjbGlja1wiOiBcInBvcFwiXG5cdCAgICAgICAgICB9LFxuXHQgICAgICAgICAgXCJjaGlsZHJlblwiOiBbXG5cdCAgICAgICAgICAgIHtcblx0ICAgICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG5cdCAgICAgICAgICAgICAgXCJjbGFzc0xpc3RcIjogW1xuXHQgICAgICAgICAgICAgICAgXCJidG4tbGVhdmUtdGV4dFwiXG5cdCAgICAgICAgICAgICAgXSxcblx0ICAgICAgICAgICAgICBcImF0dHJcIjoge1xuXHQgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuehruiupOWujOaIkFwiXG5cdCAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICBdXG5cdCAgICAgICAgfVxuXHQgICAgICBdXG5cdCAgICB9XG5cdCAgXVxuXHR9XG5cbi8qKiovIH0sXG4vKiAxNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSB7XG5cdCAgXCJzdWNjZXNzXCI6IHtcblx0ICAgIFwiekluZGV4XCI6IDIwMDEsXG5cdCAgICBcInBvc2l0aW9uXCI6IFwiYWJzb2x1dGVcIixcblx0ICAgIFwidG9wXCI6IDAsXG5cdCAgICBcImJvdHRvbVwiOiAwLFxuXHQgICAgXCJsZWZ0XCI6IDAsXG5cdCAgICBcInJpZ2h0XCI6IDAsXG5cdCAgICBcImJhY2tncm91bmRDb2xvclwiOiBcInJnYmEoMCwwLDAsMC44NSlcIixcblx0ICAgIFwianVzdGlmeUNvbnRlbnRcIjogXCJjZW50ZXJcIlxuXHQgIH0sXG5cdCAgXCJkaXN0YW5jZS13cmFwXCI6IHtcblx0ICAgIFwiZmxleERpcmVjdGlvblwiOiBcInJvd1wiLFxuXHQgICAgXCJqdXN0aWZ5Q29udGVudFwiOiBcImNlbnRlclwiLFxuXHQgICAgXCJhbGlnbkl0ZW1zXCI6IFwiY2VudGVyXCJcblx0ICB9LFxuXHQgIFwiZGlzdGFuY2VcIjoge1xuXHQgICAgXCJkaXNwbGF5XCI6IFwiaW5saW5lLWJsb2NrXCIsXG5cdCAgICBcImZvbnRTaXplXCI6IDIyMCxcblx0ICAgIFwiY29sb3JcIjogXCIjZmZmZmZmXCJcblx0ICB9LFxuXHQgIFwidW5pdFwiOiB7XG5cdCAgICBcImZvbnRTaXplXCI6IDIyLFxuXHQgICAgXCJjb2xvclwiOiBcIiNjY2NjY2NcIixcblx0ICAgIFwicGFkZGluZ1RvcFwiOiAzMCxcblx0ICAgIFwicGFkZGluZ0xlZnRcIjogMjBcblx0ICB9LFxuXHQgIFwiZGFzaGJvYXJkXCI6IHtcblx0ICAgIFwiZmxleERpcmVjdGlvblwiOiBcInJvd1wiLFxuXHQgICAgXCJhbGlnbkl0ZW1zXCI6IFwiY2VudGVyXCJcblx0ICB9LFxuXHQgIFwiZGFzaGJvYXJkLXRpdGxlXCI6IHtcblx0ICAgIFwiY29sb3JcIjogXCIjOTk5OTk5XCIsXG5cdCAgICBcImZvbnRTaXplXCI6IDI1LFxuXHQgICAgXCJtYXJnaW5Cb3R0b21cIjogMjBcblx0ICB9LFxuXHQgIFwiZGFzaGJvYXJkLWl0ZW1cIjoge1xuXHQgICAgXCJmbGV4XCI6IDEsXG5cdCAgICBcInBhZGRpbmdMZWZ0XCI6IDQwLFxuXHQgICAgXCJqdXN0aWZ5Q29udGVudFwiOiBcImNlbnRlclwiLFxuXHQgICAgXCJhbGlnbkl0ZW1zXCI6IFwiY2VudGVyXCJcblx0ICB9LFxuXHQgIFwibnVtYmVyLWxnXCI6IHtcblx0ICAgIFwiZm9udFNpemVcIjogNTAsXG5cdCAgICBcImNvbG9yXCI6IFwiI2ZmZmZmZlwiXG5cdCAgfSxcblx0ICBcImJ0bi1sZWF2ZVwiOiB7XG5cdCAgICBcIndpZHRoXCI6IDQwMCxcblx0ICAgIFwicGFkZGluZ1wiOiAyMCxcblx0ICAgIFwibWFyZ2luVG9wXCI6IDYwLFxuXHQgICAgXCJib3JkZXJXaWR0aFwiOiA0LFxuXHQgICAgXCJib3JkZXJDb2xvclwiOiBcIiNmZmZmZmZcIixcblx0ICAgIFwiYWxpZ25JdGVtc1wiOiBcImNlbnRlclwiLFxuXHQgICAgXCJib3JkZXJSYWRpdXNcIjogMTBcblx0ICB9LFxuXHQgIFwiYnRuLWxlYXZlLXRleHRcIjoge1xuXHQgICAgXCJjb2xvclwiOiBcIiNmZmZmZmZcIlxuXHQgIH1cblx0fVxuXG4vKioqLyB9LFxuLyogMTYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlZXhfcmVxdWlyZV9fKXsndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0dmFyIG5hdmlnYXRvciA9IF9fd2VleF9yZXF1aXJlX18oJ0B3ZWV4LW1vZHVsZS9uYXZpZ2F0b3InKTtcblx0ZXhwb3J0cy5kZWZhdWx0ID0ge1xuXHQgIG1ldGhvZHM6IHtcblx0ICAgIHBvcDogZnVuY3Rpb24gcG9wKCkge1xuXHRcblx0ICAgICAgbmF2aWdhdG9yLnBvcCgpO1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdH07fVxuXHQvKiBnZW5lcmF0ZWQgYnkgd2VleC1sb2FkZXIgKi9cblxuXG4vKioqLyB9LFxuLyogMTcgKi8sXG4vKiAxOCAqLyxcbi8qIDE5ICovLFxuLyogMjAgKi8sXG4vKiAyMSAqLyxcbi8qIDIyICovLFxuLyogMjMgKi8sXG4vKiAyNCAqLyxcbi8qIDI1ICovLFxuLyogMjYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdG1vZHVsZS5leHBvcnRzID0ge1xuXHQgIGNhbGNUb3RhbDogZnVuY3Rpb24gY2FsY1RvdGFsKGFyciwgaykge1xuXHQgICAgdmFyIHN1bSA9IDA7XG5cdCAgICBhcnIuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuXHQgICAgICBpZiAoaykge1xuXHQgICAgICAgIHN1bSArPSBpdGVtW2tdO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHN1bSArPSBpdGVtO1xuXHQgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIHJldHVybiBzdW07XG5cdCAgfSxcblx0ICBzZXRUaW1lRm9ybWF0OiBmdW5jdGlvbiBzZXRUaW1lRm9ybWF0KHRpbWUpIHtcblx0ICAgIHZhciBoID0gdGhpcy5zZXRaZXJvKE1hdGguZmxvb3IodGltZSAvIDM2MDApKTtcblx0ICAgIHZhciBpID0gdGhpcy5zZXRaZXJvKE1hdGguZmxvb3IodGltZSAlIDM2MDAgLyA2MCkpO1xuXHQgICAgdmFyIHMgPSB0aGlzLnNldFplcm8odGltZSAlIDYwKTtcblx0ICAgIHJldHVybiBoICsgJzonICsgaSArICc6JyArIHM7XG5cdCAgfSxcblx0ICBnZXREYXRlOiBmdW5jdGlvbiBnZXREYXRlKHRpbWUpIHtcblx0ICAgIHZhciBkID0gbmV3IERhdGUoKTtcblx0ICAgIHZhciBkYXRlc3RyaW5nID0gKFwiMFwiICsgZC5nZXREYXRlKCkpLnNsaWNlKC0yKSArIFwiLVwiICsgKFwiMFwiICsgKGQuZ2V0TW9udGgoKSArIDEpKS5zbGljZSgtMikgKyBcIi1cIiArIGQuZ2V0RnVsbFllYXIoKSArIFwiIFwiICsgKFwiMFwiICsgZC5nZXRIb3VycygpKS5zbGljZSgtMikgKyBcIjpcIiArIChcIjBcIiArIGQuZ2V0TWludXRlcygpKS5zbGljZSgtMik7XG5cdCAgICByZXR1cm4gZGF0ZXN0cmluZztcblx0ICB9LFxuXHQgIHNldFplcm86IGZ1bmN0aW9uIHNldFplcm8obnVtYmVyKSB7XG5cdCAgICByZXR1cm4gbnVtYmVyIDwgMTAgPyAnMCcgKyBudW1iZXIgOiBudW1iZXI7XG5cdCAgfSxcblx0ICBjYWxjU3BlZWQ6IGZ1bmN0aW9uIGNhbGNTcGVlZChkaXN0YW5jZSwgdGltZSkge1xuXHQgICAgcmV0dXJuIChkaXN0YW5jZSAvIHRpbWUgKiAzLjYpLnRvRml4ZWQoMik7XG5cdCAgfSxcblx0ICBleHRlbmQ6IGZ1bmN0aW9uIGV4dGVuZChvYmoxLCBvYmoyKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIG9iajIpIHtcblx0ICAgICAgdHJ5IHtcblx0ICAgICAgICBpZiAob2JqMltwXS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG5cdCAgICAgICAgICBvYmoxW3BdID0gdGhpcy5leHRlbmQob2JqMVtwXSwgb2JqMltwXSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIG9iajFbcF0gPSBvYmoyW3BdO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgIG9iajFbcF0gPSBvYmoyW3BdO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gb2JqMTtcblx0ICB9LFxuXHQgIHNldEJ1bmRsZVVybDogZnVuY3Rpb24gc2V0QnVuZGxlVXJsKHVybCwganNGaWxlKSB7XG5cdCAgICB2YXIgYnVuZGxlVXJsID0gdXJsO1xuXHQgICAgdmFyIGhvc3QgPSAnJztcblx0ICAgIHZhciBwYXRoID0gJyc7XG5cdCAgICB2YXIgbmF0aXZlQmFzZSA9IHZvaWQgMDtcblx0ICAgIHZhciBpc0FuZHJvaWRBc3NldHMgPSBidW5kbGVVcmwuaW5kZXhPZigneW91cl9jdXJyZW50X0lQJykgPj0gMCB8fCBidW5kbGVVcmwuaW5kZXhPZignZmlsZTovL2Fzc2V0cy8nKSA+PSAwO1xuXHQgICAgdmFyIGlzaU9TQXNzZXRzID0gYnVuZGxlVXJsLmluZGV4T2YoJ2ZpbGU6Ly8vJykgPj0gMCAmJiBidW5kbGVVcmwuaW5kZXhPZignV2VleERlbW8uYXBwJykgPiAwO1xuXHQgICAgaWYgKGlzQW5kcm9pZEFzc2V0cykge1xuXHQgICAgICBuYXRpdmVCYXNlID0gJ2ZpbGU6Ly9hc3NldHMvJztcblx0ICAgIH0gZWxzZSBpZiAoaXNpT1NBc3NldHMpIHtcblx0ICAgICAgLy8gZmlsZTovLy92YXIvbW9iaWxlL0NvbnRhaW5lcnMvQnVuZGxlL0FwcGxpY2F0aW9uL3tpZH0vV2VleERlbW8uYXBwL1xuXHQgICAgICAvLyBmaWxlOi8vL1VzZXJzL3t1c2VyfS9MaWJyYXJ5L0RldmVsb3Blci9Db3JlU2ltdWxhdG9yL0RldmljZXMve2lkfS9kYXRhL0NvbnRhaW5lcnMvQnVuZGxlL0FwcGxpY2F0aW9uL3tpZH0vV2VleERlbW8uYXBwL1xuXHQgICAgICBuYXRpdmVCYXNlID0gYnVuZGxlVXJsLnN1YnN0cmluZygwLCBidW5kbGVVcmwubGFzdEluZGV4T2YoJy8nKSArIDEpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdmFyIG1hdGNoZXMgPSAvXFwvXFwvKFteXFwvXSs/KVxcLy8uZXhlYyhidW5kbGVVcmwpO1xuXHQgICAgICB2YXIgbWF0Y2hGaXJzdFBhdGggPSAvXFwvXFwvLitcXC8oW15cXC9dKz8pXFwvLy5leGVjKGJ1bmRsZVVybCk7XG5cdCAgICAgIGlmIChtYXRjaGVzICYmIG1hdGNoZXMubGVuZ3RoID49IDIpIHtcblx0ICAgICAgICBob3N0ID0gbWF0Y2hlc1sxXTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAobWF0Y2hGaXJzdFBhdGggJiYgbWF0Y2hGaXJzdFBhdGgubGVuZ3RoID49IDIpIHtcblx0ICAgICAgICBwYXRoID0gbWF0Y2hGaXJzdFBhdGhbMV07XG5cdCAgICAgIH1cblx0ICAgICAgbmF0aXZlQmFzZSA9ICdodHRwOi8vJyArIGhvc3QgKyAnLyc7XG5cdCAgICB9XG5cdCAgICB2YXIgaDVCYXNlID0gJy4vaW5kZXguaHRtbD9wYWdlPSc7XG5cdCAgICAvLyBpbiBOYXRpdmVcblx0ICAgIHZhciBiYXNlID0gbmF0aXZlQmFzZTtcblx0ICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLmFwcENvZGVOYW1lID09PSAnTW96aWxsYScgfHwgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdHZWNrbycpKSB7XG5cdCAgICAgIC8vIGNoZWNrIGlmIGluIHdlZXhwYWNrIHByb2plY3Rcblx0ICAgICAgaWYgKHBhdGggPT09ICd3ZWInIHx8IHBhdGggPT09ICdkaXN0Jykge1xuXHQgICAgICAgIGJhc2UgPSBoNUJhc2UgKyAnL2Rpc3QvJztcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBiYXNlID0gaDVCYXNlICsgJyc7XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGJhc2UgPSBuYXRpdmVCYXNlICsgcGF0aCArICcvJztcblx0ICAgIH1cblx0XG5cdCAgICB2YXIgbmV3VXJsID0gYmFzZSArIGpzRmlsZTtcblx0ICAgIHJldHVybiBuZXdVcmw7XG5cdCAgfVxuXHR9O1xuXG4vKioqLyB9LFxuLyogMjcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0ge1xuXHQgIFwidHlwZVwiOiBcImRpdlwiLFxuXHQgIFwiY2xhc3NMaXN0XCI6IFtcblx0ICAgIFwiY29udGFpbmVyXCJcblx0ICBdLFxuXHQgIFwiY2hpbGRyZW5cIjogW1xuXHQgICAge1xuXHQgICAgICBcInR5cGVcIjogXCJ3ZWV4LWFtYXBcIixcblx0ICAgICAgXCJpZFwiOiBcIm1hcDIwMTdcIixcblx0ICAgICAgXCJhdHRyXCI6IHtcblx0ICAgICAgICBcImNlbnRlclwiOiBmdW5jdGlvbiAoKSB7cmV0dXJuIHRoaXMucG9zfSxcblx0ICAgICAgICBcInNka0tleVwiOiBmdW5jdGlvbiAoKSB7cmV0dXJuIHRoaXMua2V5c30sXG5cdCAgICAgICAgXCJ6b29tXCI6IGZ1bmN0aW9uICgpIHtyZXR1cm4gdGhpcy56b29tfVxuXHQgICAgICB9LFxuXHQgICAgICBcImNsYXNzTGlzdFwiOiBbXG5cdCAgICAgICAgXCJtYXBcIlxuXHQgICAgICBdLFxuXHQgICAgICBcImNoaWxkcmVuXCI6IFtcblx0ICAgICAgICB7XG5cdCAgICAgICAgICBcInR5cGVcIjogXCJ3ZWV4LWFtYXAtcG9seWxpbmVcIixcblx0ICAgICAgICAgIFwiYXR0clwiOiB7XG5cdCAgICAgICAgICAgIFwicGF0aFwiOiBmdW5jdGlvbiAoKSB7cmV0dXJuIHRoaXMucnVubmluZ0RhdGEucGF0aH0sXG5cdCAgICAgICAgICAgIFwic3Ryb2tlV2lkdGhcIjogXCIzXCIsXG5cdCAgICAgICAgICAgIFwic3Ryb2tlXCI6IFwiIzM0OThkYlwiXG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICBdXG5cdCAgICB9LFxuXHQgICAge1xuXHQgICAgICBcInR5cGVcIjogXCJkaXZcIixcblx0ICAgICAgXCJjbGFzc0xpc3RcIjogW1xuXHQgICAgICAgIFwibWFwLWNvbnRyb2xsZXJcIlxuXHQgICAgICBdLFxuXHQgICAgICBcImNoaWxkcmVuXCI6IFtcblx0ICAgICAgICB7XG5cdCAgICAgICAgICBcInR5cGVcIjogXCJkaXZcIixcblx0ICAgICAgICAgIFwiY2xhc3NMaXN0XCI6IFtcblx0ICAgICAgICAgICAgXCJkaXN0YW5jZS13cmFwXCJcblx0ICAgICAgICAgIF0sXG5cdCAgICAgICAgICBcImNoaWxkcmVuXCI6IFtcblx0ICAgICAgICAgICAge1xuXHQgICAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcblx0ICAgICAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG5cdCAgICAgICAgICAgICAgICBcImRpc3RhbmNlXCJcblx0ICAgICAgICAgICAgICBdLFxuXHQgICAgICAgICAgICAgIFwiYXR0clwiOiB7XG5cdCAgICAgICAgICAgICAgICBcInZhbHVlXCI6IGZ1bmN0aW9uICgpIHtyZXR1cm4gdGhpcy56b29tfVxuXHQgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAge1xuXHQgICAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcblx0ICAgICAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG5cdCAgICAgICAgICAgICAgICBcInVuaXRcIlxuXHQgICAgICAgICAgICAgIF0sXG5cdCAgICAgICAgICAgICAgXCJhdHRyXCI6IHtcblx0ICAgICAgICAgICAgICAgIFwidmFsdWVcIjogXCLlhazph4xcIlxuXHQgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgXVxuXHQgICAgICAgIH0sXG5cdCAgICAgICAge1xuXHQgICAgICAgICAgXCJ0eXBlXCI6IFwiZGl2XCIsXG5cdCAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG5cdCAgICAgICAgICAgIFwiZGFzaGJvYXJkXCJcblx0ICAgICAgICAgIF0sXG5cdCAgICAgICAgICBcImNoaWxkcmVuXCI6IFtcblx0ICAgICAgICAgICAge1xuXHQgICAgICAgICAgICAgIFwidHlwZVwiOiBcImRpdlwiLFxuXHQgICAgICAgICAgICAgIFwiY2xhc3NMaXN0XCI6IFtcblx0ICAgICAgICAgICAgICAgIFwiZGFzaGJvYXJkLWl0ZW1cIlxuXHQgICAgICAgICAgICAgIF0sXG5cdCAgICAgICAgICAgICAgXCJjaGlsZHJlblwiOiBbXG5cdCAgICAgICAgICAgICAgICB7XG5cdCAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImRpdlwiLFxuXHQgICAgICAgICAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG5cdCAgICAgICAgICAgICAgICAgICAgXCJ0aW1lLXdyYXBcIlxuXHQgICAgICAgICAgICAgICAgICBdLFxuXHQgICAgICAgICAgICAgICAgICBcImNoaWxkcmVuXCI6IFtcblx0ICAgICAgICAgICAgICAgICAgICB7XG5cdCAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG5cdCAgICAgICAgICAgICAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIFwiZGFzaGJvYXJkLXRpdGxlXCJcblx0ICAgICAgICAgICAgICAgICAgICAgIF0sXG5cdCAgICAgICAgICAgICAgICAgICAgICBcImF0dHJcIjoge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IFwi6L+Q5Yqo5pe26Ze0XCJcblx0ICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICAgICAgICAgIHtcblx0ICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcblx0ICAgICAgICAgICAgICAgICAgICAgIFwiY2xhc3NMaXN0XCI6IFtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgXCJudW1iZXItbGdcIlxuXHQgICAgICAgICAgICAgICAgICAgICAgXSxcblx0ICAgICAgICAgICAgICAgICAgICAgIFwiYXR0clwiOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIFwidmFsdWVcIjogZnVuY3Rpb24gKCkge3JldHVybiB0aGlzLnJ1bm5pbmdEYXRhLnRpbWV9XG5cdCAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICBdXG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgXVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICB7XG5cdCAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZGl2XCIsXG5cdCAgICAgICAgICAgICAgXCJjbGFzc0xpc3RcIjogW1xuXHQgICAgICAgICAgICAgICAgXCJkYXNoYm9hcmQtaXRlbVwiXG5cdCAgICAgICAgICAgICAgXSxcblx0ICAgICAgICAgICAgICBcImNoaWxkcmVuXCI6IFtcblx0ICAgICAgICAgICAgICAgIHtcblx0ICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuXHQgICAgICAgICAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG5cdCAgICAgICAgICAgICAgICAgICAgXCJkYXNoYm9hcmQtdGl0bGVcIlxuXHQgICAgICAgICAgICAgICAgICBdLFxuXHQgICAgICAgICAgICAgICAgICBcImF0dHJcIjoge1xuXHQgICAgICAgICAgICAgICAgICAgIFwidmFsdWVcIjogXCLphY3pgJ9cIlxuXHQgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICAgICAge1xuXHQgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG5cdCAgICAgICAgICAgICAgICAgIFwiY2xhc3NMaXN0XCI6IFtcblx0ICAgICAgICAgICAgICAgICAgICBcIm51bWJlci1sZ1wiXG5cdCAgICAgICAgICAgICAgICAgIF0sXG5cdCAgICAgICAgICAgICAgICAgIFwiYXR0clwiOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBmdW5jdGlvbiAoKSB7cmV0dXJuIHRoaXMucnVubmluZ0RhdGEuc3BlZWR9XG5cdCAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICBdXG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIHtcblx0ICAgICAgICAgICAgICBcInR5cGVcIjogXCJkaXZcIixcblx0ICAgICAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG5cdCAgICAgICAgICAgICAgICBcImRhc2hib2FyZC1pdGVtXCJcblx0ICAgICAgICAgICAgICBdLFxuXHQgICAgICAgICAgICAgIFwiY2hpbGRyZW5cIjogW1xuXHQgICAgICAgICAgICAgICAge1xuXHQgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG5cdCAgICAgICAgICAgICAgICAgIFwiY2xhc3NMaXN0XCI6IFtcblx0ICAgICAgICAgICAgICAgICAgICBcImRhc2hib2FyZC10aXRsZVwiXG5cdCAgICAgICAgICAgICAgICAgIF0sXG5cdCAgICAgICAgICAgICAgICAgIFwiYXR0clwiOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIueDremHj1wiXG5cdCAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgICB7XG5cdCAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcblx0ICAgICAgICAgICAgICAgICAgXCJjbGFzc0xpc3RcIjogW1xuXHQgICAgICAgICAgICAgICAgICAgIFwibnVtYmVyLWxnXCJcblx0ICAgICAgICAgICAgICAgICAgXSxcblx0ICAgICAgICAgICAgICAgICAgXCJhdHRyXCI6IHtcblx0ICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IGZ1bmN0aW9uICgpIHtyZXR1cm4gdGhpcy5ydW5uaW5nRGF0YS5jYWxvcmllc31cblx0ICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgIF1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgXVxuXHQgICAgICAgIH0sXG5cdCAgICAgICAge1xuXHQgICAgICAgICAgXCJ0eXBlXCI6IFwiZGl2XCIsXG5cdCAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG5cdCAgICAgICAgICAgIFwiYnRuLXdyYXBcIlxuXHQgICAgICAgICAgXSxcblx0ICAgICAgICAgIFwiY2hpbGRyZW5cIjogW1xuXHQgICAgICAgICAgICB7XG5cdCAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZGl2XCIsXG5cdCAgICAgICAgICAgICAgXCJjbGFzc0xpc3RcIjogW1xuXHQgICAgICAgICAgICAgICAgXCJidG4tY2lyY2xlXCIsXG5cdCAgICAgICAgICAgICAgICBcImJ0bi1ncmVlblwiXG5cdCAgICAgICAgICAgICAgXSxcblx0ICAgICAgICAgICAgICBcInNob3duXCI6IGZ1bmN0aW9uICgpIHtyZXR1cm4gdGhpcy5zdGF0dXM9PTF9LFxuXHQgICAgICAgICAgICAgIFwiZXZlbnRzXCI6IHtcblx0ICAgICAgICAgICAgICAgIFwiY2xpY2tcIjogXCJzdGFydFwiXG5cdCAgICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgICBcImNoaWxkcmVuXCI6IFtcblx0ICAgICAgICAgICAgICAgIHtcblx0ICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuXHQgICAgICAgICAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG5cdCAgICAgICAgICAgICAgICAgICAgXCJidG4tdGV4dFwiXG5cdCAgICAgICAgICAgICAgICAgIF0sXG5cdCAgICAgICAgICAgICAgICAgIFwiYXR0clwiOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuW8gOWni1wiXG5cdCAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICBdXG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIHtcblx0ICAgICAgICAgICAgICBcInR5cGVcIjogXCJkaXZcIixcblx0ICAgICAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG5cdCAgICAgICAgICAgICAgICBcImJ0bi1jaXJjbGVcIixcblx0ICAgICAgICAgICAgICAgIFwiYnRuLW1pZG5pZ2h0XCJcblx0ICAgICAgICAgICAgICBdLFxuXHQgICAgICAgICAgICAgIFwic2hvd25cIjogZnVuY3Rpb24gKCkge3JldHVybiB0aGlzLnN0YXR1cz09Mnx8dGhpcy5zdGF0dXM9PTN9LFxuXHQgICAgICAgICAgICAgIFwiZXZlbnRzXCI6IHtcblx0ICAgICAgICAgICAgICAgIFwiY2xpY2tcIjogXCJlbmRcIlxuXHQgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgXCJjaGlsZHJlblwiOiBbXG5cdCAgICAgICAgICAgICAgICB7XG5cdCAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcblx0ICAgICAgICAgICAgICAgICAgXCJjbGFzc0xpc3RcIjogW1xuXHQgICAgICAgICAgICAgICAgICAgIFwiYnRuLXRleHRcIlxuXHQgICAgICAgICAgICAgICAgICBdLFxuXHQgICAgICAgICAgICAgICAgICBcImF0dHJcIjoge1xuXHQgICAgICAgICAgICAgICAgICAgIFwidmFsdWVcIjogXCLnu5PmnZ9cIlxuXHQgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgXVxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICB7XG5cdCAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZGl2XCIsXG5cdCAgICAgICAgICAgICAgXCJjbGFzc0xpc3RcIjogW1xuXHQgICAgICAgICAgICAgICAgXCJidG4tY2lyY2xlXCIsXG5cdCAgICAgICAgICAgICAgICBcImJ0bi1ncmVlblwiXG5cdCAgICAgICAgICAgICAgXSxcblx0ICAgICAgICAgICAgICBcInNob3duXCI6IGZ1bmN0aW9uICgpIHtyZXR1cm4gdGhpcy5zdGF0dXM9PTN9LFxuXHQgICAgICAgICAgICAgIFwiZXZlbnRzXCI6IHtcblx0ICAgICAgICAgICAgICAgIFwiY2xpY2tcIjogXCJjb250aW51ZVwiXG5cdCAgICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgICBcImNoaWxkcmVuXCI6IFtcblx0ICAgICAgICAgICAgICAgIHtcblx0ICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuXHQgICAgICAgICAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG5cdCAgICAgICAgICAgICAgICAgICAgXCJidG4tdGV4dFwiXG5cdCAgICAgICAgICAgICAgICAgIF0sXG5cdCAgICAgICAgICAgICAgICAgIFwiYXR0clwiOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIue7p+e7rVwiXG5cdCAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICBdXG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIHtcblx0ICAgICAgICAgICAgICBcInR5cGVcIjogXCJkaXZcIixcblx0ICAgICAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG5cdCAgICAgICAgICAgICAgICBcImJ0bi1jaXJjbGVcIixcblx0ICAgICAgICAgICAgICAgIFwiYnRuLXJlZFwiXG5cdCAgICAgICAgICAgICAgXSxcblx0ICAgICAgICAgICAgICBcInNob3duXCI6IGZ1bmN0aW9uICgpIHtyZXR1cm4gdGhpcy5zdGF0dXM9PTJ9LFxuXHQgICAgICAgICAgICAgIFwiZXZlbnRzXCI6IHtcblx0ICAgICAgICAgICAgICAgIFwiY2xpY2tcIjogXCJzdG9wXCJcblx0ICAgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICAgIFwiY2hpbGRyZW5cIjogW1xuXHQgICAgICAgICAgICAgICAge1xuXHQgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG5cdCAgICAgICAgICAgICAgICAgIFwiY2xhc3NMaXN0XCI6IFtcblx0ICAgICAgICAgICAgICAgICAgICBcImJ0bi10ZXh0XCJcblx0ICAgICAgICAgICAgICAgICAgXSxcblx0ICAgICAgICAgICAgICAgICAgXCJhdHRyXCI6IHtcblx0ICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IFwi5pqC5YGcXCJcblx0ICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgIF1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgXVxuXHQgICAgICAgIH1cblx0ICAgICAgXVxuXHQgICAgfSxcblx0ICAgIHtcblx0ICAgICAgXCJ0eXBlXCI6IFwiZGl2XCIsXG5cdCAgICAgIFwiY2xhc3NMaXN0XCI6IFtcblx0ICAgICAgICBcImNvdW50ZG93bi12aWV3XCJcblx0ICAgICAgXSxcblx0ICAgICAgXCJzaG93blwiOiBmdW5jdGlvbiAoKSB7cmV0dXJuIHRoaXMuY291bnRkb3duLnNob3d9LFxuXHQgICAgICBcImNoaWxkcmVuXCI6IFtcblx0ICAgICAgICB7XG5cdCAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG5cdCAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG5cdCAgICAgICAgICAgIFwiY291bnRkb3duLXRleHRcIlxuXHQgICAgICAgICAgXSxcblx0ICAgICAgICAgIFwiYXR0clwiOiB7XG5cdCAgICAgICAgICAgIFwidmFsdWVcIjogZnVuY3Rpb24gKCkge3JldHVybiB0aGlzLmNvdW50ZG93bi50ZXh0fVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgXVxuXHQgICAgfSxcblx0ICAgIHtcblx0ICAgICAgXCJ0eXBlXCI6IFwic3VjY2Vzc1wiLFxuXHQgICAgICBcInNob3duXCI6IGZ1bmN0aW9uICgpIHtyZXR1cm4gdGhpcy5zdGF0dXM9PTR9LFxuXHQgICAgICBcImF0dHJcIjoge1xuXHQgICAgICAgIFwiZGF0YVwiOiBmdW5jdGlvbiAoKSB7cmV0dXJuIHRoaXMucnVubmluZ0RhdGF9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICBdXG5cdH1cblxuLyoqKi8gfSxcbi8qIDI4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IHtcblx0ICBcImNvbnRhaW5lclwiOiB7XG5cdCAgICBcInBvc2l0aW9uXCI6IFwicmVsYXRpdmVcIixcblx0ICAgIFwiZmxleFwiOiAxLFxuXHQgICAgXCJtaW5IZWlnaHRcIjogNjAwLFxuXHQgICAgXCJiYWNrZ3JvdW5kQ29sb3JcIjogXCIjZWVlZWVlXCJcblx0ICB9LFxuXHQgIFwiY291bnRkb3duLXZpZXdcIjoge1xuXHQgICAgXCJ6SW5kZXhcIjogMjEwMCxcblx0ICAgIFwicG9zaXRpb25cIjogXCJhYnNvbHV0ZVwiLFxuXHQgICAgXCJsZWZ0XCI6IDAsXG5cdCAgICBcInJpZ2h0XCI6IDAsXG5cdCAgICBcInRvcFwiOiAwLFxuXHQgICAgXCJib3R0b21cIjogMCxcblx0ICAgIFwiYmFja2dyb3VuZENvbG9yXCI6IFwiI2ZmZmZmZlwiLFxuXHQgICAgXCJhbGlnbkl0ZW1zXCI6IFwiY2VudGVyXCIsXG5cdCAgICBcImp1c3RpZnlDb250ZW50XCI6IFwiY2VudGVyXCJcblx0ICB9LFxuXHQgIFwiY291bnRkb3duLXRleHRcIjoge1xuXHQgICAgXCJjb2xvclwiOiBcIiNmZjY1NmRcIixcblx0ICAgIFwiZm9udFNpemVcIjogMTIwXG5cdCAgfSxcblx0ICBcIm1hcFwiOiB7XG5cdCAgICBcImZsZXhcIjogMSxcblx0ICAgIFwibWluSGVpZ2h0XCI6IDYwMFxuXHQgIH0sXG5cdCAgXCJtYXAtY29udHJvbGxlclwiOiB7XG5cdCAgICBcInpJbmRleFwiOiAyMDAwLFxuXHQgICAgXCJwb3NpdGlvblwiOiBcImFic29sdXRlXCIsXG5cdCAgICBcImxlZnRcIjogMCxcblx0ICAgIFwicmlnaHRcIjogMCxcblx0ICAgIFwiYm90dG9tXCI6IDAsXG5cdCAgICBcImhlaWdodFwiOiA1MDAsXG5cdCAgICBcImJhY2tncm91bmRDb2xvclwiOiBcInJnYmEoMjU1LDI1NSwyNTUsMSlcIixcblx0ICAgIFwiYm9yZGVyVG9wV2lkdGhcIjogMixcblx0ICAgIFwiYm9yZGVyVG9wQ29sb3JcIjogXCJyZ2JhKDAsMCwwLDAuMjUpXCJcblx0ICB9LFxuXHQgIFwiZGlzdGFuY2Utd3JhcFwiOiB7XG5cdCAgICBcImZsZXhcIjogMSxcblx0ICAgIFwiZmxleERpcmVjdGlvblwiOiBcInJvd1wiLFxuXHQgICAgXCJqdXN0aWZ5Q29udGVudFwiOiBcImNlbnRlclwiLFxuXHQgICAgXCJhbGlnbkl0ZW1zXCI6IFwiY2VudGVyXCJcblx0ICB9LFxuXHQgIFwiZGlzdGFuY2VcIjoge1xuXHQgICAgXCJkaXNwbGF5XCI6IFwiaW5saW5lLWJsb2NrXCIsXG5cdCAgICBcImZvbnRTaXplXCI6IDkwLFxuXHQgICAgXCJjb2xvclwiOiBcIiMxMTExMTFcIlxuXHQgIH0sXG5cdCAgXCJ1bml0XCI6IHtcblx0ICAgIFwiZm9udFNpemVcIjogMjIsXG5cdCAgICBcImNvbG9yXCI6IFwiIzMzMzMzM1wiLFxuXHQgICAgXCJwYWRkaW5nVG9wXCI6IDMwLFxuXHQgICAgXCJwYWRkaW5nTGVmdFwiOiAyMFxuXHQgIH0sXG5cdCAgXCJkYXNoYm9hcmRcIjoge1xuXHQgICAgXCJmbGV4XCI6IDEsXG5cdCAgICBcImZsZXhEaXJlY3Rpb25cIjogXCJyb3dcIlxuXHQgIH0sXG5cdCAgXCJkYXNoYm9hcmQtdGl0bGVcIjoge1xuXHQgICAgXCJjb2xvclwiOiBcIiM5OTk5OTlcIixcblx0ICAgIFwiZm9udFNpemVcIjogMjUsXG5cdCAgICBcIm1hcmdpbkJvdHRvbVwiOiAyMFxuXHQgIH0sXG5cdCAgXCJkYXNoYm9hcmQtaXRlbVwiOiB7XG5cdCAgICBcImZsZXhcIjogMSxcblx0ICAgIFwicGFkZGluZ0xlZnRcIjogNDAsXG5cdCAgICBcImp1c3RpZnlDb250ZW50XCI6IFwiY2VudGVyXCJcblx0ICB9LFxuXHQgIFwibnVtYmVyLWxnXCI6IHtcblx0ICAgIFwiZm9udFNpemVcIjogNDIsXG5cdCAgICBcImNvbG9yXCI6IFwiIzIyMjIyMlwiXG5cdCAgfSxcblx0ICBcImJ0bi13cmFwXCI6IHtcblx0ICAgIFwiZmxleFwiOiAxLFxuXHQgICAgXCJmbGV4RGlyZWN0aW9uXCI6IFwicm93XCIsXG5cdCAgICBcImFsaWduSXRlbXNcIjogXCJjZW50ZXJcIixcblx0ICAgIFwianVzdGlmeUNvbnRlbnRcIjogXCJjZW50ZXJcIlxuXHQgIH0sXG5cdCAgXCJidG4tY2lyY2xlXCI6IHtcblx0ICAgIFwid2lkdGhcIjogMTIwLFxuXHQgICAgXCJoZWlnaHRcIjogMTIwLFxuXHQgICAgXCJtYXJnaW5MZWZ0XCI6IDQwLFxuXHQgICAgXCJtYXJnaW5SaWdodFwiOiA0MCxcblx0ICAgIFwiYm9yZGVyUmFkaXVzXCI6IDEyMCxcblx0ICAgIFwiYWxpZ25JdGVtc1wiOiBcImNlbnRlclwiLFxuXHQgICAgXCJqdXN0aWZ5Q29udGVudFwiOiBcImNlbnRlclwiLFxuXHQgICAgXCJiYWNrZ3JvdW5kQ29sb3JcIjogXCIjZWVlZWVlXCJcblx0ICB9LFxuXHQgIFwiYnRuLXRleHRcIjoge1xuXHQgICAgXCJjb2xvclwiOiBcIiNmZmZmZmZcIixcblx0ICAgIFwiZm9udFNpemVcIjogMjBcblx0ICB9LFxuXHQgIFwiYnRuLXJlZFwiOiB7XG5cdCAgICBcImJhY2tncm91bmRDb2xvclwiOiBcIiNmZjYyNmRcIlxuXHQgIH0sXG5cdCAgXCJidG4tZ3JlZW5cIjoge1xuXHQgICAgXCJiYWNrZ3JvdW5kQ29sb3JcIjogXCIjMjFkNDVmXCJcblx0ICB9LFxuXHQgIFwiYnRuLW1pZG5pZ2h0XCI6IHtcblx0ICAgIFwiYmFja2dyb3VuZENvbG9yXCI6IFwiIzM0NDk1ZVwiXG5cdCAgfVxuXHR9XG5cbi8qKiovIH0sXG4vKiAyOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VleF9yZXF1aXJlX18peyd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBfc3RyaW5naWZ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMCk7XG5cdFxuXHR2YXIgX3N0cmluZ2lmeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdHJpbmdpZnkpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdHZhciB1dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpO1xuXHR2YXIgc3RhdHVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMyk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oMzQpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KTtcblx0dmFyIHN0b3JhZ2UgPSBfX3dlZXhfcmVxdWlyZV9fKCdAd2VleC1tb2R1bGUvc3RvcmFnZScpO1xuXHR2YXIgQW1hcCA9IF9fd2VleF9yZXF1aXJlX18oJ0B3ZWV4LW1vZHVsZS9hbWFwJyk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IHtcblx0ICBkYXRhOiBmdW5jdGlvbiAoKSB7cmV0dXJuIHtcblx0ICAgIGtleXM6IHtcblx0ICAgICAgaDU6ICdmNGI5OWRjZDUxNzUyMTQyZWMwZjFiZGNiOWE4ZWMwMicsXG5cdCAgICAgIGlvczogJ2M1NTFmODNlMWU1YjE5YWY4OWM3NDA5NmYxYzBmMDA3Jyxcblx0ICAgICAgYW5kcm9pZDogJ2RiNmE5NzMxNTljYjBjMjYzOWFkMDJjNjE3YTc4NmFlJ1xuXHQgICAgfSxcblx0ICAgIHpvb206IDE4LFxuXHQgICAgcG9zOiBbMTIzLCAzM10sXG5cdCAgICBzdGF0dXM6IHN0YXR1c1snUlVOTklOR19SRUFEWSddLFxuXHQgICAgcnVubmluZ0RhdGE6IHtcblx0ICAgICAgZGlzdGFuY2U6IDAsXG5cdCAgICAgIG1pbGVzOiAwLFxuXHQgICAgICBwYXRoOiBbXSxcblx0ICAgICAgdGltZTogJzAwOjAwOjAwJyxcblx0ICAgICAgc2Vjb25kczogMCxcblx0ICAgICAgc3BlZWQ6IDAsXG5cdCAgICAgIGNhbG9yaWVzOiAwXG5cdCAgICB9LFxuXHQgICAgbWVzc2FnZTogJ+ato+WcqOi/kOihjCcsXG5cdCAgICBjb3VudGRvd246IHtcblx0ICAgICAgdGV4dDogJzMnLFxuXHQgICAgICBzaG93OiBmYWxzZVxuXHQgICAgfSxcblx0XG5cdCAgICB0aW1lUmVjb3JkZXI6IG51bGwsXG5cdCAgICBhbWFwUmVjb3JkZXI6IG51bGxcblx0XG5cdCAgfX0sXG5cdFxuXHQgIG1ldGhvZHM6IHtcblx0ICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydCgpIHtcblx0ICAgICAgdGhpcy5zdGF0dXMgPSBzdGF0dXMuUlVOTklOR19ET0lORztcblx0ICAgICAgdGhpcy5jb3VudGRvd24uc2hvdyA9IHRydWU7XG5cdCAgICAgIHRoaXMuY291bnREb3duVGltZSgpO1xuXHQgICAgICB0aGlzLnJ1bm5pbmdBbWFwR2VvbG9jYXRpb24oKTtcblx0ICAgIH0sXG5cdCAgICBzdG9wOiBmdW5jdGlvbiBzdG9wKCkge1xuXHQgICAgICB0aGlzLnN0YXRzdSA9IHN0YXR1cy5SVU5OSU5HX1BBVVNFO1xuXHQgICAgICBjbGVhckludGVydmFsKHRoaXMudGltZVJlY29yZGVyKTtcblx0ICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmFtYXBSZWNvcmRlcik7XG5cdCAgICB9LFxuXHQgICAgY29udGludWU6IGZ1bmN0aW9uIF9jb250aW51ZSgpIHtcblx0ICAgICAgdGhpcy5zdGF0dXMgPSBzdGF0dXMuUlVOTklOR19ET0lORztcblx0ICAgICAgdGhpcy5jb3VudERvd25UaW1lKCk7XG5cdCAgICAgIHRoaXMucnVubmluZ0FtYXBHZW9sb2NhdGlvbigpO1xuXHQgICAgfSxcblx0ICAgIGVuZDogZnVuY3Rpb24gZW5kKCkge1xuXHQgICAgICBjbGVhckludGVydmFsKHRoaXMudGltZVJlY29yZGVyKTtcblx0ICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmFtYXBSZWNvcmRlcik7XG5cdCAgICAgIHZhciBzZWxmID0gdGhpcztcblx0ICAgICAgY29uc29sZS5sb2coMSk7XG5cdCAgICAgIHN0b3JhZ2UuZ2V0SXRlbSgncnVubmluZ0RhdGEnLCBmdW5jdGlvbiAocmVzKSB7XG5cdCAgICAgICAgdmFyIGRhdGEgPSBbXTtcblx0ICAgICAgICBpZiAocmVzLnJlc3VsdCA9PSAnc3VjY2VzcycpIHtcblx0ICAgICAgICAgIGRhdGEgPSByZXMuZGF0YTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuXHQgICAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGRhdGEudW5zaGlmdCh1dGlscy5leHRlbmQoe1xuXHQgICAgICAgICAgZGF0ZTogdXRpbHMuZ2V0RGF0ZSgpLnJlcGxhY2UoL1xccy4vLCAnJyksXG5cdCAgICAgICAgICBzdGFuZHJhbmREYXRlOiB1dGlscy5nZXREYXRlKClcblx0ICAgICAgICB9LCBzZWxmLnJ1bm5pbmdEYXRhKSk7XG5cdCAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG5cdCAgICAgICAgc3RvcmFnZS5zZXRJdGVtKCdydW5uaW5nRGF0YScsICgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KShkYXRhKSwgZnVuY3Rpb24gKHJlcykge1xuXHQgICAgICAgICAgaWYgKHJlcy5yZXN1bHQgPT0gJ3N1Y2Nlc3MnKSB7XG5cdCAgICAgICAgICAgIHNlbGYuc3RhdHVzID0gc3RhdHVzLlJVTk5JTkdfRU5EO1xuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfSk7XG5cdCAgICB9LFxuXHQgICAgc2V0VXNlckxvY2F0aW9uOiBmdW5jdGlvbiBzZXRVc2VyTG9jYXRpb24oY2FsbGJhY2spIHtcblx0ICAgICAgQW1hcC5nZXRVc2VyTG9jYXRpb24odGhpcy4kZWwoJ21hcDIwMTcnKS5yZWYsIGNhbGxiYWNrKTtcblx0ICAgIH0sXG5cdCAgICBjb3VudERvd25UaW1lOiBmdW5jdGlvbiBjb3VudERvd25UaW1lKCkge1xuXHQgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXHRcblx0ICAgICAgaWYgKHRoaXMuc3RhdHVzID09IHN0YXR1cy5SVU5OSU5HX0RPSU5HKSB7XG5cdCAgICAgICAgdGhpcy5jb3VudGRvd24uc2hvdyA9IHRydWU7XG5cdCAgICAgIH1cblx0ICAgICAgdGhpcy50aW1lUmVjb3JkZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgX3RoaXMucnVubmluZ0RhdGEuc2Vjb25kcysrO1xuXHQgICAgICAgIGlmIChfdGhpcy5ydW5uaW5nRGF0YS5zZWNvbmRzIDw9IDQpIHtcblx0ICAgICAgICAgIGlmIChfdGhpcy5ydW5uaW5nRGF0YS5zZWNvbmRzID09IDMpIHtcblx0ICAgICAgICAgICAgX3RoaXMuY291bnRkb3duLnRleHQgPSAnR08hJztcblx0ICAgICAgICAgIH0gZWxzZSBpZiAoX3RoaXMucnVubmluZ0RhdGEuc2Vjb25kcyA9PSA0KSB7XG5cdCAgICAgICAgICAgIF90aGlzLmNvdW50ZG93bi5zaG93ID0gZmFsc2U7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBfdGhpcy5jb3VudGRvd24udGV4dCA9IDMgLSBfdGhpcy5ydW5uaW5nRGF0YS5zZWNvbmRzO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBfdGhpcy5ydW5uaW5nRGF0YS50aW1lID0gdXRpbHMuc2V0VGltZUZvcm1hdChfdGhpcy5ydW5uaW5nRGF0YS5zZWNvbmRzKTtcblx0ICAgICAgfSwgMTAwMCk7XG5cdCAgICB9LFxuXHQgICAgcnVubmluZ0FtYXBHZW9sb2NhdGlvbjogZnVuY3Rpb24gcnVubmluZ0FtYXBHZW9sb2NhdGlvbigpIHtcblx0ICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cdFxuXHQgICAgICB0aGlzLnNldFVzZXJMb2NhdGlvbihmdW5jdGlvbiAocmVzKSB7XG5cdCAgICAgICAgaWYgKHJlcy5yZXN1bHQgPT0gJ3N1Y2Nlc3MnKSB7XG5cdCAgICAgICAgICBfdGhpczIucG9zID0gcmVzLmRhdGEucG9zaXRpb247XG5cdCAgICAgICAgICBfdGhpczIucnVubmluZ0RhdGEucGF0aC5wdXNoKHJlcy5kYXRhLnBvc2l0aW9uKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgICB0aGlzLmFtYXBSZWNvcmRlciA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBfdGhpczIuc2V0VXNlckxvY2F0aW9uKGZ1bmN0aW9uIChyZXMpIHtcblx0ICAgICAgICAgIGlmIChyZXMucmVzdWx0ID09ICdzdWNjZXNzJykge1xuXHQgICAgICAgICAgICBfdGhpczIucG9zID0gcmVzLmRhdGEucG9zaXRpb247XG5cdCAgICAgICAgICAgIF90aGlzMi5ydW5uaW5nRGF0YS5wYXRoLnB1c2gocmVzLmRhdGEucG9zaXRpb24pO1xuXHQgICAgICAgICAgICBfdGhpczIuY2FsY0Rpc3RhbmNlQW5kU3BlZWQoKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgICAgfSwgMTAwMDApO1xuXHQgICAgfSxcblx0ICAgIGNhbGNEaXN0YW5jZUFuZFNwZWVkOiBmdW5jdGlvbiBjYWxjRGlzdGFuY2VBbmRTcGVlZCgpIHtcblx0ICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cdFxuXHQgICAgICB2YXIgbGVuID0gdGhpcy5ydW5uaW5nRGF0YS5wYXRoLmxlbmd0aDtcblx0ICAgICAgaWYgKGxlbiA+IDEpIHtcblx0ICAgICAgICBBbWFwLmdldExpbmVEaXN0YW5jZSh0aGlzLnJ1bm5pbmdEYXRhLnBhdGhbbGVuIC0gMV0sIHRoaXMucnVubmluZ0RhdGEucGF0aFtsZW4gLSAyXSwgZnVuY3Rpb24gKHJlcykge1xuXHQgICAgICAgICAgaWYgKHJlcy5yZXN1bHQgPT0gJ3N1Y2Nlc3MnKSB7XG5cdCAgICAgICAgICAgIF90aGlzMy5ydW5uaW5nRGF0YS5kaXN0YW5jZSArPSByZXMuZGF0YS5kaXN0YW5jZTtcblx0ICAgICAgICAgICAgX3RoaXMzLnJ1bm5pbmdEYXRhLm1pbGVzID0gX3RoaXMzLnJ1bm5pbmdEYXRhLmRpc3RhbmNlLnRvRml4ZWQoMik7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBfdGhpczMucnVubmluZ0RhdGEuY2Fsb3JpZXMgPSAoX3RoaXMzLnJ1bm5pbmdEYXRhLmRpc3RhbmNlIC8gMTAwMCkudG9GaXhlZCgyKTtcblx0ICAgICAgICAgIF90aGlzMy5ydW5uaW5nRGF0YS5zcGVlZCA9IHV0aWxzLmNhbGNTcGVlZChfdGhpczMucnVubmluZ0RhdGEuZGlzdGFuY2UsIF90aGlzMy5ydW5uaW5nRGF0YS5zZWNvbmRzKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0fTt9XG5cdC8qIGdlbmVyYXRlZCBieSB3ZWV4LWxvYWRlciAqL1xuXG5cbi8qKiovIH0sXG4vKiAzMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG4vKioqLyB9LFxuLyogMzEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBjb3JlICA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpXG5cdCAgLCAkSlNPTiA9IGNvcmUuSlNPTiB8fCAoY29yZS5KU09OID0ge3N0cmluZ2lmeTogSlNPTi5zdHJpbmdpZnl9KTtcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cdCAgcmV0dXJuICRKU09OLnN0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJndW1lbnRzKTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDMyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHR2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0ge3ZlcnNpb246ICcyLjQuMCd9O1xuXHRpZih0eXBlb2YgX19lID09ICdudW1iZXInKV9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuLyoqKi8gfSxcbi8qIDMzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0ge1xuXHQgIFJVTk5JTkdfUkVBRFk6IDEsXG5cdCAgUlVOTklOR19ET0lORzogMixcblx0ICBSVU5OSU5HX1BBVVNFOiAzLFxuXHQgIFJVTk5JTkdfRU5EOiA0XG5cdH07XG5cbi8qKiovIH0sXG4vKiAzNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIF9fd2VleF90ZW1wbGF0ZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KVxuXHR2YXIgX193ZWV4X3N0eWxlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpXG5cdHZhciBfX3dlZXhfc2NyaXB0X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKVxuXHRcblx0X193ZWV4X2RlZmluZV9fKCdAd2VleC1jb21wb25lbnQvbWVzc2FnZScsIFtdLCBmdW5jdGlvbihfX3dlZXhfcmVxdWlyZV9fLCBfX3dlZXhfZXhwb3J0c19fLCBfX3dlZXhfbW9kdWxlX18pIHtcblx0XG5cdCAgICBfX3dlZXhfc2NyaXB0X18oX193ZWV4X21vZHVsZV9fLCBfX3dlZXhfZXhwb3J0c19fLCBfX3dlZXhfcmVxdWlyZV9fKVxuXHQgICAgaWYgKF9fd2VleF9leHBvcnRzX18uX19lc01vZHVsZSAmJiBfX3dlZXhfZXhwb3J0c19fLmRlZmF1bHQpIHtcblx0ICAgICAgX193ZWV4X21vZHVsZV9fLmV4cG9ydHMgPSBfX3dlZXhfZXhwb3J0c19fLmRlZmF1bHRcblx0ICAgIH1cblx0XG5cdCAgICBfX3dlZXhfbW9kdWxlX18uZXhwb3J0cy50ZW1wbGF0ZSA9IF9fd2VleF90ZW1wbGF0ZV9fXG5cdFxuXHQgICAgX193ZWV4X21vZHVsZV9fLmV4cG9ydHMuc3R5bGUgPSBfX3dlZXhfc3R5bGVfX1xuXHRcblx0fSlcblxuXG4vKioqLyB9LFxuLyogMzUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBfX3dlZXhfdGVtcGxhdGVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpXG5cdHZhciBfX3dlZXhfc3R5bGVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpXG5cdHZhciBfX3dlZXhfc2NyaXB0X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KVxuXHRcblx0X193ZWV4X2RlZmluZV9fKCdAd2VleC1jb21wb25lbnQvc3VjY2VzcycsIFtdLCBmdW5jdGlvbihfX3dlZXhfcmVxdWlyZV9fLCBfX3dlZXhfZXhwb3J0c19fLCBfX3dlZXhfbW9kdWxlX18pIHtcblx0XG5cdCAgICBfX3dlZXhfc2NyaXB0X18oX193ZWV4X21vZHVsZV9fLCBfX3dlZXhfZXhwb3J0c19fLCBfX3dlZXhfcmVxdWlyZV9fKVxuXHQgICAgaWYgKF9fd2VleF9leHBvcnRzX18uX19lc01vZHVsZSAmJiBfX3dlZXhfZXhwb3J0c19fLmRlZmF1bHQpIHtcblx0ICAgICAgX193ZWV4X21vZHVsZV9fLmV4cG9ydHMgPSBfX3dlZXhfZXhwb3J0c19fLmRlZmF1bHRcblx0ICAgIH1cblx0XG5cdCAgICBfX3dlZXhfbW9kdWxlX18uZXhwb3J0cy50ZW1wbGF0ZSA9IF9fd2VleF90ZW1wbGF0ZV9fXG5cdFxuXHQgICAgX193ZWV4X21vZHVsZV9fLmV4cG9ydHMuc3R5bGUgPSBfX3dlZXhfc3R5bGVfX1xuXHRcblx0fSlcblxuXG4vKioqLyB9XG4vKioqKioqLyBdKTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gcnVubmluZy5qcyIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDJkMTE1Nzc3MTYwYjIxMWJiNGU5IiwidmFyIF9fd2VleF90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL3dlZXgtbG9hZGVyL2xpYi9qc29uLmpzIS4uL25vZGVfbW9kdWxlcy93ZWV4LWxvYWRlci9saWIvdGVtcGxhdGUuanMhLi4vbm9kZV9tb2R1bGVzL3dlZXgtbG9hZGVyL2xpYi9leHRyYWN0LmpzP3R5cGU9dGVtcGxhdGUhLi9ydW5uaW5nLndlXCIpXG52YXIgX193ZWV4X3N0eWxlX18gPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvd2VleC1sb2FkZXIvbGliL2pzb24uanMhLi4vbm9kZV9tb2R1bGVzL3dlZXgtbG9hZGVyL2xpYi9zdHlsZS5qcyEuLi9ub2RlX21vZHVsZXMvd2VleC1sb2FkZXIvbGliL2V4dHJhY3QuanM/aW5kZXg9MCZ0eXBlPXN0eWxlcyEuL3J1bm5pbmcud2VcIilcbnZhciBfX3dlZXhfc2NyaXB0X18gPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvd2VleC1sb2FkZXIvbGliL3NjcmlwdC5qcyFiYWJlbC1sb2FkZXI/cHJlc2V0c1tdPS9Vc2Vycy9hbGktMTMwMjU3bi93d3cvYW1hcC1ydW5uaW5nLWFwcC9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LWVzMjAxNSZwcmVzZXRzPS9Vc2Vycy9hbGktMTMwMjU3bi93d3cvYW1hcC1ydW5uaW5nLWFwcC9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LWVzMjAxNSZwbHVnaW5zW109L1VzZXJzL2FsaS0xMzAyNTduL3d3dy9hbWFwLXJ1bm5pbmctYXBwL25vZGVfbW9kdWxlcy9iYWJlbC1wbHVnaW4tdHJhbnNmb3JtLXJ1bnRpbWUmcGx1Z2lucz0vVXNlcnMvYWxpLTEzMDI1N24vd3d3L2FtYXAtcnVubmluZy1hcHAvbm9kZV9tb2R1bGVzL2JhYmVsLXBsdWdpbi10cmFuc2Zvcm0tcnVudGltZSZjb21tZW50cz1mYWxzZSEuLi9ub2RlX21vZHVsZXMvd2VleC1sb2FkZXIvbGliL2V4dHJhY3QuanM/aW5kZXg9MCZ0eXBlPXNjcmlwdHMhLi9ydW5uaW5nLndlXCIpXG5cbl9fd2VleF9kZWZpbmVfXygnQHdlZXgtY29tcG9uZW50LzMzZDIxM2FlMWM3ZGVkZjBlOWZiYmFiNDRjNzQxMDVkJywgW10sIGZ1bmN0aW9uKF9fd2VleF9yZXF1aXJlX18sIF9fd2VleF9leHBvcnRzX18sIF9fd2VleF9tb2R1bGVfXykge1xuXG4gICAgX193ZWV4X3NjcmlwdF9fKF9fd2VleF9tb2R1bGVfXywgX193ZWV4X2V4cG9ydHNfXywgX193ZWV4X3JlcXVpcmVfXylcbiAgICBpZiAoX193ZWV4X2V4cG9ydHNfXy5fX2VzTW9kdWxlICYmIF9fd2VleF9leHBvcnRzX18uZGVmYXVsdCkge1xuICAgICAgX193ZWV4X21vZHVsZV9fLmV4cG9ydHMgPSBfX3dlZXhfZXhwb3J0c19fLmRlZmF1bHRcbiAgICB9XG5cbiAgICBfX3dlZXhfbW9kdWxlX18uZXhwb3J0cy50ZW1wbGF0ZSA9IF9fd2VleF90ZW1wbGF0ZV9fXG5cbiAgICBfX3dlZXhfbW9kdWxlX18uZXhwb3J0cy5zdHlsZSA9IF9fd2VleF9zdHlsZV9fXG5cbn0pXG5cbl9fd2VleF9ib290c3RyYXBfXygnQHdlZXgtY29tcG9uZW50LzMzZDIxM2FlMWM3ZGVkZjBlOWZiYmFiNDRjNzQxMDVkJyx1bmRlZmluZWQsdW5kZWZpbmVkKVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3J1bm5pbmcud2U/ZW50cnk9dHJ1ZVxuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDYiLCJ2YXIgX193ZWV4X3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvd2VleC1sb2FkZXIvbGliL2pzb24uanMhLi4vLi4vbm9kZV9tb2R1bGVzL3dlZXgtbG9hZGVyL2xpYi90ZW1wbGF0ZS5qcyEuLi8uLi9ub2RlX21vZHVsZXMvd2VleC1sb2FkZXIvbGliL2V4dHJhY3QuanM/dHlwZT10ZW1wbGF0ZSEuL3VuaXQud2VcIilcbnZhciBfX3dlZXhfc3R5bGVfXyA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy93ZWV4LWxvYWRlci9saWIvanNvbi5qcyEuLi8uLi9ub2RlX21vZHVsZXMvd2VleC1sb2FkZXIvbGliL3N0eWxlLmpzIS4uLy4uL25vZGVfbW9kdWxlcy93ZWV4LWxvYWRlci9saWIvZXh0cmFjdC5qcz9pbmRleD0wJnR5cGU9c3R5bGVzIS4vdW5pdC53ZVwiKVxudmFyIF9fd2VleF9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy93ZWV4LWxvYWRlci9saWIvc2NyaXB0LmpzIWJhYmVsLWxvYWRlcj9wcmVzZXRzW109L1VzZXJzL2FsaS0xMzAyNTduL3d3dy9hbWFwLXJ1bm5pbmctYXBwL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtZXMyMDE1JnByZXNldHM9L1VzZXJzL2FsaS0xMzAyNTduL3d3dy9hbWFwLXJ1bm5pbmctYXBwL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtZXMyMDE1JnBsdWdpbnNbXT0vVXNlcnMvYWxpLTEzMDI1N24vd3d3L2FtYXAtcnVubmluZy1hcHAvbm9kZV9tb2R1bGVzL2JhYmVsLXBsdWdpbi10cmFuc2Zvcm0tcnVudGltZSZwbHVnaW5zPS9Vc2Vycy9hbGktMTMwMjU3bi93d3cvYW1hcC1ydW5uaW5nLWFwcC9ub2RlX21vZHVsZXMvYmFiZWwtcGx1Z2luLXRyYW5zZm9ybS1ydW50aW1lJmNvbW1lbnRzPWZhbHNlIS4uLy4uL25vZGVfbW9kdWxlcy93ZWV4LWxvYWRlci9saWIvZXh0cmFjdC5qcz9pbmRleD0wJnR5cGU9c2NyaXB0cyEuL3VuaXQud2VcIilcblxuX193ZWV4X2RlZmluZV9fKCdAd2VleC1jb21wb25lbnQvdW5pdCcsIFtdLCBmdW5jdGlvbihfX3dlZXhfcmVxdWlyZV9fLCBfX3dlZXhfZXhwb3J0c19fLCBfX3dlZXhfbW9kdWxlX18pIHtcblxuICAgIF9fd2VleF9zY3JpcHRfXyhfX3dlZXhfbW9kdWxlX18sIF9fd2VleF9leHBvcnRzX18sIF9fd2VleF9yZXF1aXJlX18pXG4gICAgaWYgKF9fd2VleF9leHBvcnRzX18uX19lc01vZHVsZSAmJiBfX3dlZXhfZXhwb3J0c19fLmRlZmF1bHQpIHtcbiAgICAgIF9fd2VleF9tb2R1bGVfXy5leHBvcnRzID0gX193ZWV4X2V4cG9ydHNfXy5kZWZhdWx0XG4gICAgfVxuXG4gICAgX193ZWV4X21vZHVsZV9fLmV4cG9ydHMudGVtcGxhdGUgPSBfX3dlZXhfdGVtcGxhdGVfX1xuXG4gICAgX193ZWV4X21vZHVsZV9fLmV4cG9ydHMuc3R5bGUgPSBfX3dlZXhfc3R5bGVfX1xuXG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvaW5jbHVkZS91bml0LndlXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAzIDUgNiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBcInR5cGVcIjogXCJkaXZcIixcbiAgXCJjbGFzc0xpc3RcIjogW1xuICAgIFwidW5pdC1ib3hcIlxuICBdLFxuICBcImNoaWxkcmVuXCI6IFtcbiAgICB7XG4gICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICBcImNsYXNzTGlzdFwiOiBbXG4gICAgICAgIFwidW5pdC1udW1iZXJcIlxuICAgICAgXSxcbiAgICAgIFwic3R5bGVcIjoge1xuICAgICAgICBcImZvbnRTaXplXCI6IGZ1bmN0aW9uICgpIHtyZXR1cm4gdGhpcy5udW1iZXJTaXplfVxuICAgICAgfSxcbiAgICAgIFwiYXR0clwiOiB7XG4gICAgICAgIFwidmFsdWVcIjogZnVuY3Rpb24gKCkge3JldHVybiB0aGlzLm51bWJlcn1cbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgIFwiY2xhc3NMaXN0XCI6IFtcbiAgICAgICAgXCJ1bml0LXRleHRcIlxuICAgICAgXSxcbiAgICAgIFwiYXR0clwiOiB7XG4gICAgICAgIFwidmFsdWVcIjogZnVuY3Rpb24gKCkge3JldHVybiB0aGlzLmxhYmVsfVxuICAgICAgfVxuICAgIH1cbiAgXVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi93ZWV4LWxvYWRlci9saWIvanNvbi5qcyEuL34vd2VleC1sb2FkZXIvbGliL3RlbXBsYXRlLmpzIS4vfi93ZWV4LWxvYWRlci9saWIvZXh0cmFjdC5qcz90eXBlPXRlbXBsYXRlIS4vc3JjL2luY2x1ZGUvdW5pdC53ZVxuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMyA0IDUgNiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBcInVuaXQtYm94XCI6IHtcbiAgICBcImZsZXhEaXJlY3Rpb25cIjogXCJyb3dcIixcbiAgICBcImp1c3RpZnlDb250ZW50XCI6IFwiY2VudGVyXCIsXG4gICAgXCJhbGlnbkl0ZW1zXCI6IFwiZmxleC1lbmRcIlxuICB9LFxuICBcInVuaXQtbnVtYmVyXCI6IHtcbiAgICBcImRpc3BsYXlcIjogXCJpbmxpbmUtYmxvY2tcIixcbiAgICBcImZvbnRTaXplXCI6IDUwLFxuICAgIFwiY29sb3JcIjogXCIjMTExMTExXCJcbiAgfSxcbiAgXCJ1bml0LXRleHRcIjoge1xuICAgIFwiZm9udFNpemVcIjogMjIsXG4gICAgXCJjb2xvclwiOiBcIiMzMzMzMzNcIixcbiAgICBcInBhZGRpbmdMZWZ0XCI6IDIwLFxuICAgIFwianVzdGlmeUNvbnRlbnRcIjogXCJmbGV4LWVuZFwiLFxuICAgIFwiYWxpZ25JdGVtc1wiOiBcImZsZXgtZW5kXCJcbiAgfVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi93ZWV4LWxvYWRlci9saWIvanNvbi5qcyEuL34vd2VleC1sb2FkZXIvbGliL3N0eWxlLmpzIS4vfi93ZWV4LWxvYWRlci9saWIvZXh0cmFjdC5qcz9pbmRleD0wJnR5cGU9c3R5bGVzIS4vc3JjL2luY2x1ZGUvdW5pdC53ZVxuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMyA0IDUgNiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBcInR5cGVcIjogXCJkaXZcIixcbiAgXCJjbGFzc0xpc3RcIjogW1xuICAgIFwibWVzc2FnZVwiXG4gIF0sXG4gIFwiY2hpbGRyZW5cIjogW1xuICAgIHtcbiAgICAgIFwidHlwZVwiOiBcImltYWdlXCIsXG4gICAgICBcInNob3duXCI6IGZ1bmN0aW9uICgpIHtyZXR1cm4gdGhpcy5sb2FkaW5nfSxcbiAgICAgIFwiY2xhc3NMaXN0XCI6IFtcbiAgICAgICAgXCJsb2FkaW5nLWdpZlwiXG4gICAgICBdLFxuICAgICAgXCJhdHRyXCI6IHtcbiAgICAgICAgXCJzcmNcIjogXCJodHRwOi8vaW1nMS52dWVkLnZhbnRoaW5rLmNuL3Z1ZWRmMDcyNDcxZDBiOTdkNjEyMjgyZDFjZTAxMGNiMWRlMS5naWZcIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgXCJjbGFzc0xpc3RcIjogW1xuICAgICAgICBcIm1lc3NhZ2UtdGV4dFwiXG4gICAgICBdLFxuICAgICAgXCJhdHRyXCI6IHtcbiAgICAgICAgXCJ2YWx1ZVwiOiBmdW5jdGlvbiAoKSB7cmV0dXJuIHRoaXMubWVzc2FnZX1cbiAgICAgIH1cbiAgICB9XG4gIF1cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vd2VleC1sb2FkZXIvbGliL2pzb24uanMhLi9+L3dlZXgtbG9hZGVyL2xpYi90ZW1wbGF0ZS5qcyEuL34vd2VleC1sb2FkZXIvbGliL2V4dHJhY3QuanM/dHlwZT10ZW1wbGF0ZSEuL3NyYy9pbmNsdWRlL21lc3NhZ2Uud2Vcbi8vIG1vZHVsZSBpZCA9IDhcbi8vIG1vZHVsZSBjaHVua3MgPSAxIDYiLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgXCJtZXNzYWdlXCI6IHtcbiAgICBcInpJbmRleFwiOiAyMDAxLFxuICAgIFwicG9zaXRpb25cIjogXCJhYnNvbHV0ZVwiLFxuICAgIFwibGVmdFwiOiAzMCxcbiAgICBcInRvcFwiOiAzMCxcbiAgICBcImhlaWdodFwiOiA2MCxcbiAgICBcImJvcmRlclJhZGl1c1wiOiAzMCxcbiAgICBcInBhZGRpbmdMZWZ0XCI6IDMwLFxuICAgIFwicGFkZGluZ1JpZ2h0XCI6IDMwLFxuICAgIFwiYmFja2dyb3VuZENvbG9yXCI6IFwiI2ZmZmZmZlwiLFxuICAgIFwiZmxleERpcmVjdGlvblwiOiBcInJvd1wiLFxuICAgIFwiYWxpZ25JdGVtc1wiOiBcImNlbnRlclwiXG4gIH0sXG4gIFwibWVzc2FnZS10ZXh0XCI6IHtcbiAgICBcImZvbnRTaXplXCI6IDIwXG4gIH0sXG4gIFwibG9hZGluZy1naWZcIjoge1xuICAgIFwid2lkdGhcIjogMzAsXG4gICAgXCJoZWlnaHRcIjogMzBcbiAgfVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi93ZWV4LWxvYWRlci9saWIvanNvbi5qcyEuL34vd2VleC1sb2FkZXIvbGliL3N0eWxlLmpzIS4vfi93ZWV4LWxvYWRlci9saWIvZXh0cmFjdC5qcz9pbmRleD0wJnR5cGU9c3R5bGVzIS4vc3JjL2luY2x1ZGUvbWVzc2FnZS53ZVxuLy8gbW9kdWxlIGlkID0gOVxuLy8gbW9kdWxlIGNodW5rcyA9IDEgNiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBcInR5cGVcIjogXCJkaXZcIixcbiAgXCJjbGFzc0xpc3RcIjogW1xuICAgIFwic3VjY2Vzc1wiXG4gIF0sXG4gIFwiY2hpbGRyZW5cIjogW1xuICAgIHtcbiAgICAgIFwidHlwZVwiOiBcImRpdlwiLFxuICAgICAgXCJjbGFzc0xpc3RcIjogW1xuICAgICAgICBcInN1Y2Nlc3MtZGF0YVwiXG4gICAgICBdLFxuICAgICAgXCJjaGlsZHJlblwiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcInR5cGVcIjogXCJkaXZcIixcbiAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG4gICAgICAgICAgICBcImRpc3RhbmNlLXdyYXBcIlxuICAgICAgICAgIF0sXG4gICAgICAgICAgXCJjaGlsZHJlblwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgICAgXCJjbGFzc0xpc3RcIjogW1xuICAgICAgICAgICAgICAgIFwiZGlzdGFuY2VcIlxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBcImF0dHJcIjoge1xuICAgICAgICAgICAgICAgIFwidmFsdWVcIjogZnVuY3Rpb24gKCkge3JldHVybiB0aGlzLmRhdGEubWlsZXN9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgICAgXCJjbGFzc0xpc3RcIjogW1xuICAgICAgICAgICAgICAgIFwidW5pdFwiXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIFwiYXR0clwiOiB7XG4gICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuWFrOmHjFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcInR5cGVcIjogXCJkaXZcIixcbiAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG4gICAgICAgICAgICBcImRhc2hib2FyZFwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBcImNoaWxkcmVuXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZGl2XCIsXG4gICAgICAgICAgICAgIFwiY2xhc3NMaXN0XCI6IFtcbiAgICAgICAgICAgICAgICBcImRhc2hib2FyZC1pdGVtXCJcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgXCJjaGlsZHJlblwiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZGl2XCIsXG4gICAgICAgICAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG4gICAgICAgICAgICAgICAgICAgIFwidGltZS13cmFwXCJcbiAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICBcImNoaWxkcmVuXCI6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRhc2hib2FyZC10aXRsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICBcImF0dHJcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIui/kOWKqOaXtumXtFwiXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgICAgICAgIFwiY2xhc3NMaXN0XCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibnVtYmVyLWxnXCJcbiAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgIFwiYXR0clwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IGZ1bmN0aW9uICgpIHtyZXR1cm4gdGhpcy5kYXRhLnRpbWV9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJkaXZcIixcbiAgICAgICAgICAgICAgXCJjbGFzc0xpc3RcIjogW1xuICAgICAgICAgICAgICAgIFwiZGFzaGJvYXJkLWl0ZW1cIlxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBcImNoaWxkcmVuXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgICAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG4gICAgICAgICAgICAgICAgICAgIFwiZGFzaGJvYXJkLXRpdGxlXCJcbiAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICBcImF0dHJcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IFwi54Ot6YePXCJcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICAgIFwiY2xhc3NMaXN0XCI6IFtcbiAgICAgICAgICAgICAgICAgICAgXCJudW1iZXItbGdcIlxuICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgIFwiYXR0clwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwidmFsdWVcIjogZnVuY3Rpb24gKCkge3JldHVybiB0aGlzLmRhdGEuY2Fsb3JpZXN9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcInR5cGVcIjogXCJkaXZcIixcbiAgICAgIFwic3R5bGVcIjoge1xuICAgICAgICBcImFsaWduSXRlbXNcIjogXCJjZW50ZXJcIlxuICAgICAgfSxcbiAgICAgIFwiY2hpbGRyZW5cIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiZGl2XCIsXG4gICAgICAgICAgXCJjbGFzc0xpc3RcIjogW1xuICAgICAgICAgICAgXCJidG4tbGVhdmVcIlxuICAgICAgICAgIF0sXG4gICAgICAgICAgXCJldmVudHNcIjoge1xuICAgICAgICAgICAgXCJjbGlja1wiOiBcInBvcFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImNoaWxkcmVuXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG4gICAgICAgICAgICAgICAgXCJidG4tbGVhdmUtdGV4dFwiXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIFwiYXR0clwiOiB7XG4gICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuehruiupOWujOaIkFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9XG4gIF1cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vd2VleC1sb2FkZXIvbGliL2pzb24uanMhLi9+L3dlZXgtbG9hZGVyL2xpYi90ZW1wbGF0ZS5qcyEuL34vd2VleC1sb2FkZXIvbGliL2V4dHJhY3QuanM/dHlwZT10ZW1wbGF0ZSEuL3NyYy9pbmNsdWRlL3N1Y2Nlc3Mud2Vcbi8vIG1vZHVsZSBpZCA9IDE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMyA2IiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIFwic3VjY2Vzc1wiOiB7XG4gICAgXCJ6SW5kZXhcIjogMjAwMSxcbiAgICBcInBvc2l0aW9uXCI6IFwiYWJzb2x1dGVcIixcbiAgICBcInRvcFwiOiAwLFxuICAgIFwiYm90dG9tXCI6IDAsXG4gICAgXCJsZWZ0XCI6IDAsXG4gICAgXCJyaWdodFwiOiAwLFxuICAgIFwiYmFja2dyb3VuZENvbG9yXCI6IFwicmdiYSgwLDAsMCwwLjg1KVwiLFxuICAgIFwianVzdGlmeUNvbnRlbnRcIjogXCJjZW50ZXJcIlxuICB9LFxuICBcImRpc3RhbmNlLXdyYXBcIjoge1xuICAgIFwiZmxleERpcmVjdGlvblwiOiBcInJvd1wiLFxuICAgIFwianVzdGlmeUNvbnRlbnRcIjogXCJjZW50ZXJcIixcbiAgICBcImFsaWduSXRlbXNcIjogXCJjZW50ZXJcIlxuICB9LFxuICBcImRpc3RhbmNlXCI6IHtcbiAgICBcImRpc3BsYXlcIjogXCJpbmxpbmUtYmxvY2tcIixcbiAgICBcImZvbnRTaXplXCI6IDIyMCxcbiAgICBcImNvbG9yXCI6IFwiI2ZmZmZmZlwiXG4gIH0sXG4gIFwidW5pdFwiOiB7XG4gICAgXCJmb250U2l6ZVwiOiAyMixcbiAgICBcImNvbG9yXCI6IFwiI2NjY2NjY1wiLFxuICAgIFwicGFkZGluZ1RvcFwiOiAzMCxcbiAgICBcInBhZGRpbmdMZWZ0XCI6IDIwXG4gIH0sXG4gIFwiZGFzaGJvYXJkXCI6IHtcbiAgICBcImZsZXhEaXJlY3Rpb25cIjogXCJyb3dcIixcbiAgICBcImFsaWduSXRlbXNcIjogXCJjZW50ZXJcIlxuICB9LFxuICBcImRhc2hib2FyZC10aXRsZVwiOiB7XG4gICAgXCJjb2xvclwiOiBcIiM5OTk5OTlcIixcbiAgICBcImZvbnRTaXplXCI6IDI1LFxuICAgIFwibWFyZ2luQm90dG9tXCI6IDIwXG4gIH0sXG4gIFwiZGFzaGJvYXJkLWl0ZW1cIjoge1xuICAgIFwiZmxleFwiOiAxLFxuICAgIFwicGFkZGluZ0xlZnRcIjogNDAsXG4gICAgXCJqdXN0aWZ5Q29udGVudFwiOiBcImNlbnRlclwiLFxuICAgIFwiYWxpZ25JdGVtc1wiOiBcImNlbnRlclwiXG4gIH0sXG4gIFwibnVtYmVyLWxnXCI6IHtcbiAgICBcImZvbnRTaXplXCI6IDUwLFxuICAgIFwiY29sb3JcIjogXCIjZmZmZmZmXCJcbiAgfSxcbiAgXCJidG4tbGVhdmVcIjoge1xuICAgIFwid2lkdGhcIjogNDAwLFxuICAgIFwicGFkZGluZ1wiOiAyMCxcbiAgICBcIm1hcmdpblRvcFwiOiA2MCxcbiAgICBcImJvcmRlcldpZHRoXCI6IDQsXG4gICAgXCJib3JkZXJDb2xvclwiOiBcIiNmZmZmZmZcIixcbiAgICBcImFsaWduSXRlbXNcIjogXCJjZW50ZXJcIixcbiAgICBcImJvcmRlclJhZGl1c1wiOiAxMFxuICB9LFxuICBcImJ0bi1sZWF2ZS10ZXh0XCI6IHtcbiAgICBcImNvbG9yXCI6IFwiI2ZmZmZmZlwiXG4gIH1cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vd2VleC1sb2FkZXIvbGliL2pzb24uanMhLi9+L3dlZXgtbG9hZGVyL2xpYi9zdHlsZS5qcyEuL34vd2VleC1sb2FkZXIvbGliL2V4dHJhY3QuanM/aW5kZXg9MCZ0eXBlPXN0eWxlcyEuL3NyYy9pbmNsdWRlL3N1Y2Nlc3Mud2Vcbi8vIG1vZHVsZSBpZCA9IDE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMyA2IiwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwic3VjY2Vzc1wiPlxuICAgIDxkaXYgY2xhc3M9XCJzdWNjZXNzLWRhdGFcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJkaXN0YW5jZS13cmFwXCI+XG4gICAgICAgIDx0ZXh0IGNsYXNzPVwiZGlzdGFuY2VcIj57e2RhdGEubWlsZXN9fTwvdGV4dD5cbiAgICAgICAgPHRleHQgY2xhc3M9XCJ1bml0XCI+5YWs6YeMPC90ZXh0PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiZGFzaGJvYXJkXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJkYXNoYm9hcmQtaXRlbVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0aW1lLXdyYXBcIj5cbiAgICAgICAgICAgIDx0ZXh0IGNsYXNzPVwiZGFzaGJvYXJkLXRpdGxlXCI+6L+Q5Yqo5pe26Ze0PC90ZXh0PlxuICAgICAgICAgICAgPHRleHQgY2xhc3M9XCJudW1iZXItbGdcIj57e2RhdGEudGltZX19PC90ZXh0PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImRhc2hib2FyZC1pdGVtXCI+XG4gICAgICAgICAgPHRleHQgY2xhc3M9XCJkYXNoYm9hcmQtdGl0bGVcIj7ng63ph488L3RleHQ+XG4gICAgICAgICAgPHRleHQgY2xhc3M9XCJudW1iZXItbGdcIj57e2RhdGEuY2Fsb3JpZXN9fTwvdGV4dD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IHN0eWxlPVwiYWxpZ24taXRlbXM6Y2VudGVyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiYnRuLWxlYXZlXCIgb25jbGljaz1cInBvcFwiPlxuICAgICAgICA8dGV4dCBjbGFzcz1cImJ0bi1sZWF2ZS10ZXh0XCI+56Gu6K6k5a6M5oiQPC90ZXh0PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuXG48L3RlbXBsYXRlPlxuXG48c3R5bGU+XG4uc3VjY2Vzc3tcbiAgei1pbmRleDogMjAwMTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIGJvdHRvbTogMDtcbiAgbGVmdDogMDtcbiAgcmlnaHQ6IDA7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwwLDAsLjg1KTtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG59XG4uZGlzdGFuY2Utd3JhcHtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG4uZGlzdGFuY2Uge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGZvbnQtc2l6ZTogMjIwO1xuICBjb2xvcjogI2ZmZjtcbn1cbi51bml0e1xuICBmb250LXNpemU6IDIyO1xuICBjb2xvcjogI2NjYztcbiAgcGFkZGluZy10b3A6IDMwO1xuICBwYWRkaW5nLWxlZnQ6IDIwO1xufVxuLmRhc2hib2FyZHtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cbi5kYXNoYm9hcmQtdGl0bGV7XG4gIGNvbG9yOiAjOTk5O1xuICBmb250LXNpemU6IDI1O1xuICBtYXJnaW4tYm90dG9tOiAyMDtcbn1cbi5kYXNoYm9hcmQtaXRlbXtcbiAgZmxleDoxO1xuICBwYWRkaW5nLWxlZnQ6IDQwO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cbi5udW1iZXItbGd7XG4gIGZvbnQtc2l6ZTogNTA7XG4gIGNvbG9yOiAjZmZmO1xufVxuLmJ0bi1sZWF2ZXtcbiAgd2lkdGg6IDQwMDtcbiAgcGFkZGluZzogMjA7XG4gIG1hcmdpbi10b3A6IDYwO1xuICBib3JkZXItd2lkdGg6IDQ7XG4gIGJvcmRlci1jb2xvcjogI2ZmZmZmZjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgYm9yZGVyLXJhZGl1czogMTA7XG59XG4uYnRuLWxlYXZlLXRleHR7XG4gIGNvbG9yOiAjZmZmZmZmO1xuXG59XG5cbjwvc3R5bGU+XG5cbjxzY3JpcHQ+XG4gIFxuICByZXF1aXJlKCcuL3VuaXQud2UnKTtcbiAgY29uc3QgbmF2aWdhdG9yID0gcmVxdWlyZSgnQHdlZXgtbW9kdWxlL25hdmlnYXRvcicpO1xuICBleHBvcnQgZGVmYXVsdCB7XG4gICAgbWV0aG9kczoge1xuICAgICAgcG9wKCkge1xuICAgICAgICBcbiAgICAgICAgbmF2aWdhdG9yLnBvcCgpO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgfTtcblxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvaW5jbHVkZS9zdWNjZXNzLndlPzY1MDI4MDhmIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNhbGNUb3RhbChhcnIsIGspIHtcbiAgICBsZXQgc3VtID0gMDtcbiAgICBhcnIuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgaWYgKGspIHtcbiAgICAgICAgc3VtICs9IGl0ZW1ba107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdW0gKz0gaXRlbTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc3VtO1xuICB9LFxuICBzZXRUaW1lRm9ybWF0KHRpbWUpIHtcbiAgICBjb25zdCBoID0gdGhpcy5zZXRaZXJvKE1hdGguZmxvb3IodGltZSAvIDM2MDApKTtcbiAgICBjb25zdCBpID0gdGhpcy5zZXRaZXJvKE1hdGguZmxvb3IoKHRpbWUgJSAzNjAwKSAvIDYwKSk7XG4gICAgY29uc3QgcyA9IHRoaXMuc2V0WmVybyh0aW1lICUgNjApO1xuICAgIHJldHVybiBoICsgJzonICsgaSArICc6JyArIHM7XG4gIH0sXG4gIGdldERhdGUodGltZSkge1xuICAgIHZhciBkID0gbmV3IERhdGUoKTtcbiAgICB2YXIgZGF0ZXN0cmluZyA9IChcIjBcIiArIGQuZ2V0RGF0ZSgpKS5zbGljZSgtMikgKyBcIi1cIiArIChcIjBcIisoZC5nZXRNb250aCgpKzEpKS5zbGljZSgtMikgKyBcIi1cIiArXG4gICAgZC5nZXRGdWxsWWVhcigpICsgXCIgXCIgKyAoXCIwXCIgKyBkLmdldEhvdXJzKCkpLnNsaWNlKC0yKSArIFwiOlwiICsgKFwiMFwiICsgZC5nZXRNaW51dGVzKCkpLnNsaWNlKC0yKTtcbiAgICByZXR1cm4gZGF0ZXN0cmluZztcbiAgfSxcbiAgc2V0WmVybyhudW1iZXIpIHtcbiAgICByZXR1cm4gbnVtYmVyIDwgMTAgPyAnMCcgKyBudW1iZXIgOiBudW1iZXI7XG4gIH0sXG4gIGNhbGNTcGVlZChkaXN0YW5jZSwgdGltZSkge1xuICAgIHJldHVybiAoKGRpc3RhbmNlIC8gdGltZSkgKiAzLjYpLnRvRml4ZWQoMik7XG4gIH0sXG4gIGV4dGVuZChvYmoxLCBvYmoyKSB7XG4gICAgZm9yIChjb25zdCBwIGluIG9iajIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChvYmoyW3BdLmNvbnN0cnVjdG9yID09PSBPYmplY3QpIHtcbiAgICAgICAgICBvYmoxW3BdID0gdGhpcy5leHRlbmQob2JqMVtwXSwgb2JqMltwXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2JqMVtwXSA9IG9iajJbcF07XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgb2JqMVtwXSA9IG9iajJbcF07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmoxO1xuICB9LFxuICBzZXRCdW5kbGVVcmwodXJsLCBqc0ZpbGUpIHtcbiAgICBjb25zdCBidW5kbGVVcmwgPSB1cmw7XG4gICAgbGV0IGhvc3QgPSAnJztcbiAgICBsZXQgcGF0aCA9ICcnO1xuICAgIGxldCBuYXRpdmVCYXNlO1xuICAgIGNvbnN0IGlzQW5kcm9pZEFzc2V0cyA9IGJ1bmRsZVVybC5pbmRleE9mKCd5b3VyX2N1cnJlbnRfSVAnKSA+PSAwIHx8IGJ1bmRsZVVybC5pbmRleE9mKCdmaWxlOi8vYXNzZXRzLycpID49IDA7XG4gICAgY29uc3QgaXNpT1NBc3NldHMgPSBidW5kbGVVcmwuaW5kZXhPZignZmlsZTovLy8nKSA+PSAwICYmIGJ1bmRsZVVybC5pbmRleE9mKCdXZWV4RGVtby5hcHAnKSA+IDA7XG4gICAgaWYgKGlzQW5kcm9pZEFzc2V0cykge1xuICAgICAgbmF0aXZlQmFzZSA9ICdmaWxlOi8vYXNzZXRzLyc7XG4gICAgfSBlbHNlIGlmIChpc2lPU0Fzc2V0cykge1xuICAgICAgLy8gZmlsZTovLy92YXIvbW9iaWxlL0NvbnRhaW5lcnMvQnVuZGxlL0FwcGxpY2F0aW9uL3tpZH0vV2VleERlbW8uYXBwL1xuICAgICAgLy8gZmlsZTovLy9Vc2Vycy97dXNlcn0vTGlicmFyeS9EZXZlbG9wZXIvQ29yZVNpbXVsYXRvci9EZXZpY2VzL3tpZH0vZGF0YS9Db250YWluZXJzL0J1bmRsZS9BcHBsaWNhdGlvbi97aWR9L1dlZXhEZW1vLmFwcC9cbiAgICAgIG5hdGl2ZUJhc2UgPSBidW5kbGVVcmwuc3Vic3RyaW5nKDAsIGJ1bmRsZVVybC5sYXN0SW5kZXhPZignLycpICsgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG1hdGNoZXMgPSAvXFwvXFwvKFteXFwvXSs/KVxcLy8uZXhlYyhidW5kbGVVcmwpO1xuICAgICAgY29uc3QgbWF0Y2hGaXJzdFBhdGggPSAvXFwvXFwvLitcXC8oW15cXC9dKz8pXFwvLy5leGVjKGJ1bmRsZVVybCk7XG4gICAgICBpZiAobWF0Y2hlcyAmJiBtYXRjaGVzLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgIGhvc3QgPSBtYXRjaGVzWzFdO1xuICAgICAgfVxuICAgICAgaWYgKG1hdGNoRmlyc3RQYXRoICYmIG1hdGNoRmlyc3RQYXRoLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgIHBhdGggPSBtYXRjaEZpcnN0UGF0aFsxXTtcbiAgICAgIH1cbiAgICAgIG5hdGl2ZUJhc2UgPSAnaHR0cDovLycgKyBob3N0ICsgJy8nO1xuICAgIH1cbiAgICBjb25zdCBoNUJhc2UgPSAnLi9pbmRleC5odG1sP3BhZ2U9JztcbiAgICAvLyBpbiBOYXRpdmVcbiAgICBsZXQgYmFzZSA9IG5hdGl2ZUJhc2U7XG4gICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IuYXBwQ29kZU5hbWUgPT09ICdNb3ppbGxhJyB8fCBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ0dlY2tvJykpIHtcbiAgICAgIC8vIGNoZWNrIGlmIGluIHdlZXhwYWNrIHByb2plY3RcbiAgICAgIGlmIChwYXRoID09PSAnd2ViJyB8fCBwYXRoID09PSAnZGlzdCcpIHtcbiAgICAgICAgYmFzZSA9IGg1QmFzZSArICcvZGlzdC8nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZSA9IGg1QmFzZSArICcnO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBiYXNlID0gbmF0aXZlQmFzZSArIHBhdGggKyAnLyc7XG4gICAgfVxuXG4gICAgY29uc3QgbmV3VXJsID0gYmFzZSArIGpzRmlsZTtcbiAgICByZXR1cm4gbmV3VXJsO1xuICB9XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2xpYi91dGlscy5qcyIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBcInR5cGVcIjogXCJkaXZcIixcbiAgXCJjbGFzc0xpc3RcIjogW1xuICAgIFwiY29udGFpbmVyXCJcbiAgXSxcbiAgXCJjaGlsZHJlblwiOiBbXG4gICAge1xuICAgICAgXCJ0eXBlXCI6IFwid2VleC1hbWFwXCIsXG4gICAgICBcImlkXCI6IFwibWFwMjAxN1wiLFxuICAgICAgXCJhdHRyXCI6IHtcbiAgICAgICAgXCJjZW50ZXJcIjogZnVuY3Rpb24gKCkge3JldHVybiB0aGlzLnBvc30sXG4gICAgICAgIFwic2RrS2V5XCI6IGZ1bmN0aW9uICgpIHtyZXR1cm4gdGhpcy5rZXlzfSxcbiAgICAgICAgXCJ6b29tXCI6IGZ1bmN0aW9uICgpIHtyZXR1cm4gdGhpcy56b29tfVxuICAgICAgfSxcbiAgICAgIFwiY2xhc3NMaXN0XCI6IFtcbiAgICAgICAgXCJtYXBcIlxuICAgICAgXSxcbiAgICAgIFwiY2hpbGRyZW5cIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwid2VleC1hbWFwLXBvbHlsaW5lXCIsXG4gICAgICAgICAgXCJhdHRyXCI6IHtcbiAgICAgICAgICAgIFwicGF0aFwiOiBmdW5jdGlvbiAoKSB7cmV0dXJuIHRoaXMucnVubmluZ0RhdGEucGF0aH0sXG4gICAgICAgICAgICBcInN0cm9rZVdpZHRoXCI6IFwiM1wiLFxuICAgICAgICAgICAgXCJzdHJva2VcIjogXCIjMzQ5OGRiXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwidHlwZVwiOiBcImRpdlwiLFxuICAgICAgXCJjbGFzc0xpc3RcIjogW1xuICAgICAgICBcIm1hcC1jb250cm9sbGVyXCJcbiAgICAgIF0sXG4gICAgICBcImNoaWxkcmVuXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwidHlwZVwiOiBcImRpdlwiLFxuICAgICAgICAgIFwiY2xhc3NMaXN0XCI6IFtcbiAgICAgICAgICAgIFwiZGlzdGFuY2Utd3JhcFwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBcImNoaWxkcmVuXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG4gICAgICAgICAgICAgICAgXCJkaXN0YW5jZVwiXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIFwiYXR0clwiOiB7XG4gICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBmdW5jdGlvbiAoKSB7cmV0dXJuIHRoaXMuem9vbX1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG4gICAgICAgICAgICAgICAgXCJ1bml0XCJcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgXCJhdHRyXCI6IHtcbiAgICAgICAgICAgICAgICBcInZhbHVlXCI6IFwi5YWs6YeMXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwidHlwZVwiOiBcImRpdlwiLFxuICAgICAgICAgIFwiY2xhc3NMaXN0XCI6IFtcbiAgICAgICAgICAgIFwiZGFzaGJvYXJkXCJcbiAgICAgICAgICBdLFxuICAgICAgICAgIFwiY2hpbGRyZW5cIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJkaXZcIixcbiAgICAgICAgICAgICAgXCJjbGFzc0xpc3RcIjogW1xuICAgICAgICAgICAgICAgIFwiZGFzaGJvYXJkLWl0ZW1cIlxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBcImNoaWxkcmVuXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJkaXZcIixcbiAgICAgICAgICAgICAgICAgIFwiY2xhc3NMaXN0XCI6IFtcbiAgICAgICAgICAgICAgICAgICAgXCJ0aW1lLXdyYXBcIlxuICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgIFwiY2hpbGRyZW5cIjogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgICAgICAgIFwiY2xhc3NMaXN0XCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGFzaGJvYXJkLXRpdGxlXCJcbiAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgIFwiYXR0clwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IFwi6L+Q5Yqo5pe26Ze0XCJcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgXCJjbGFzc0xpc3RcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJudW1iZXItbGdcIlxuICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJhdHRyXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidmFsdWVcIjogZnVuY3Rpb24gKCkge3JldHVybiB0aGlzLnJ1bm5pbmdEYXRhLnRpbWV9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJkaXZcIixcbiAgICAgICAgICAgICAgXCJjbGFzc0xpc3RcIjogW1xuICAgICAgICAgICAgICAgIFwiZGFzaGJvYXJkLWl0ZW1cIlxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBcImNoaWxkcmVuXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgICAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG4gICAgICAgICAgICAgICAgICAgIFwiZGFzaGJvYXJkLXRpdGxlXCJcbiAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICBcImF0dHJcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IFwi6YWN6YCfXCJcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICAgIFwiY2xhc3NMaXN0XCI6IFtcbiAgICAgICAgICAgICAgICAgICAgXCJudW1iZXItbGdcIlxuICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgIFwiYXR0clwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwidmFsdWVcIjogZnVuY3Rpb24gKCkge3JldHVybiB0aGlzLnJ1bm5pbmdEYXRhLnNwZWVkfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZGl2XCIsXG4gICAgICAgICAgICAgIFwiY2xhc3NMaXN0XCI6IFtcbiAgICAgICAgICAgICAgICBcImRhc2hib2FyZC1pdGVtXCJcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgXCJjaGlsZHJlblwiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgICAgXCJjbGFzc0xpc3RcIjogW1xuICAgICAgICAgICAgICAgICAgICBcImRhc2hib2FyZC10aXRsZVwiXG4gICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgXCJhdHRyXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIueDremHj1wiXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgICAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG4gICAgICAgICAgICAgICAgICAgIFwibnVtYmVyLWxnXCJcbiAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICBcImF0dHJcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IGZ1bmN0aW9uICgpIHtyZXR1cm4gdGhpcy5ydW5uaW5nRGF0YS5jYWxvcmllc31cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcInR5cGVcIjogXCJkaXZcIixcbiAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG4gICAgICAgICAgICBcImJ0bi13cmFwXCJcbiAgICAgICAgICBdLFxuICAgICAgICAgIFwiY2hpbGRyZW5cIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJkaXZcIixcbiAgICAgICAgICAgICAgXCJjbGFzc0xpc3RcIjogW1xuICAgICAgICAgICAgICAgIFwiYnRuLWNpcmNsZVwiLFxuICAgICAgICAgICAgICAgIFwiYnRuLWdyZWVuXCJcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgXCJzaG93blwiOiBmdW5jdGlvbiAoKSB7cmV0dXJuIHRoaXMuc3RhdHVzPT0xfSxcbiAgICAgICAgICAgICAgXCJldmVudHNcIjoge1xuICAgICAgICAgICAgICAgIFwiY2xpY2tcIjogXCJzdGFydFwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiY2hpbGRyZW5cIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICAgIFwiY2xhc3NMaXN0XCI6IFtcbiAgICAgICAgICAgICAgICAgICAgXCJidG4tdGV4dFwiXG4gICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgXCJhdHRyXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIuW8gOWni1wiXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJkaXZcIixcbiAgICAgICAgICAgICAgXCJjbGFzc0xpc3RcIjogW1xuICAgICAgICAgICAgICAgIFwiYnRuLWNpcmNsZVwiLFxuICAgICAgICAgICAgICAgIFwiYnRuLW1pZG5pZ2h0XCJcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgXCJzaG93blwiOiBmdW5jdGlvbiAoKSB7cmV0dXJuIHRoaXMuc3RhdHVzPT0yfHx0aGlzLnN0YXR1cz09M30sXG4gICAgICAgICAgICAgIFwiZXZlbnRzXCI6IHtcbiAgICAgICAgICAgICAgICBcImNsaWNrXCI6IFwiZW5kXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJjaGlsZHJlblwiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgICAgXCJjbGFzc0xpc3RcIjogW1xuICAgICAgICAgICAgICAgICAgICBcImJ0bi10ZXh0XCJcbiAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICBcImF0dHJcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IFwi57uT5p2fXCJcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcImRpdlwiLFxuICAgICAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG4gICAgICAgICAgICAgICAgXCJidG4tY2lyY2xlXCIsXG4gICAgICAgICAgICAgICAgXCJidG4tZ3JlZW5cIlxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBcInNob3duXCI6IGZ1bmN0aW9uICgpIHtyZXR1cm4gdGhpcy5zdGF0dXM9PTN9LFxuICAgICAgICAgICAgICBcImV2ZW50c1wiOiB7XG4gICAgICAgICAgICAgICAgXCJjbGlja1wiOiBcImNvbnRpbnVlXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJjaGlsZHJlblwiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgICAgXCJjbGFzc0xpc3RcIjogW1xuICAgICAgICAgICAgICAgICAgICBcImJ0bi10ZXh0XCJcbiAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICBcImF0dHJcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IFwi57un57utXCJcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcImRpdlwiLFxuICAgICAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG4gICAgICAgICAgICAgICAgXCJidG4tY2lyY2xlXCIsXG4gICAgICAgICAgICAgICAgXCJidG4tcmVkXCJcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgXCJzaG93blwiOiBmdW5jdGlvbiAoKSB7cmV0dXJuIHRoaXMuc3RhdHVzPT0yfSxcbiAgICAgICAgICAgICAgXCJldmVudHNcIjoge1xuICAgICAgICAgICAgICAgIFwiY2xpY2tcIjogXCJzdG9wXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJjaGlsZHJlblwiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgICAgXCJjbGFzc0xpc3RcIjogW1xuICAgICAgICAgICAgICAgICAgICBcImJ0bi10ZXh0XCJcbiAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICBcImF0dHJcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IFwi5pqC5YGcXCJcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwidHlwZVwiOiBcImRpdlwiLFxuICAgICAgXCJjbGFzc0xpc3RcIjogW1xuICAgICAgICBcImNvdW50ZG93bi12aWV3XCJcbiAgICAgIF0sXG4gICAgICBcInNob3duXCI6IGZ1bmN0aW9uICgpIHtyZXR1cm4gdGhpcy5jb3VudGRvd24uc2hvd30sXG4gICAgICBcImNoaWxkcmVuXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgICBcImNsYXNzTGlzdFwiOiBbXG4gICAgICAgICAgICBcImNvdW50ZG93bi10ZXh0XCJcbiAgICAgICAgICBdLFxuICAgICAgICAgIFwiYXR0clwiOiB7XG4gICAgICAgICAgICBcInZhbHVlXCI6IGZ1bmN0aW9uICgpIHtyZXR1cm4gdGhpcy5jb3VudGRvd24udGV4dH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwidHlwZVwiOiBcInN1Y2Nlc3NcIixcbiAgICAgIFwic2hvd25cIjogZnVuY3Rpb24gKCkge3JldHVybiB0aGlzLnN0YXR1cz09NH0sXG4gICAgICBcImF0dHJcIjoge1xuICAgICAgICBcImRhdGFcIjogZnVuY3Rpb24gKCkge3JldHVybiB0aGlzLnJ1bm5pbmdEYXRhfVxuICAgICAgfVxuICAgIH1cbiAgXVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi93ZWV4LWxvYWRlci9saWIvanNvbi5qcyEuL34vd2VleC1sb2FkZXIvbGliL3RlbXBsYXRlLmpzIS4vfi93ZWV4LWxvYWRlci9saWIvZXh0cmFjdC5qcz90eXBlPXRlbXBsYXRlIS4vc3JjL3J1bm5pbmcud2Vcbi8vIG1vZHVsZSBpZCA9IDI3XG4vLyBtb2R1bGUgY2h1bmtzID0gNiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBcImNvbnRhaW5lclwiOiB7XG4gICAgXCJwb3NpdGlvblwiOiBcInJlbGF0aXZlXCIsXG4gICAgXCJmbGV4XCI6IDEsXG4gICAgXCJtaW5IZWlnaHRcIjogNjAwLFxuICAgIFwiYmFja2dyb3VuZENvbG9yXCI6IFwiI2VlZWVlZVwiXG4gIH0sXG4gIFwiY291bnRkb3duLXZpZXdcIjoge1xuICAgIFwiekluZGV4XCI6IDIxMDAsXG4gICAgXCJwb3NpdGlvblwiOiBcImFic29sdXRlXCIsXG4gICAgXCJsZWZ0XCI6IDAsXG4gICAgXCJyaWdodFwiOiAwLFxuICAgIFwidG9wXCI6IDAsXG4gICAgXCJib3R0b21cIjogMCxcbiAgICBcImJhY2tncm91bmRDb2xvclwiOiBcIiNmZmZmZmZcIixcbiAgICBcImFsaWduSXRlbXNcIjogXCJjZW50ZXJcIixcbiAgICBcImp1c3RpZnlDb250ZW50XCI6IFwiY2VudGVyXCJcbiAgfSxcbiAgXCJjb3VudGRvd24tdGV4dFwiOiB7XG4gICAgXCJjb2xvclwiOiBcIiNmZjY1NmRcIixcbiAgICBcImZvbnRTaXplXCI6IDEyMFxuICB9LFxuICBcIm1hcFwiOiB7XG4gICAgXCJmbGV4XCI6IDEsXG4gICAgXCJtaW5IZWlnaHRcIjogNjAwXG4gIH0sXG4gIFwibWFwLWNvbnRyb2xsZXJcIjoge1xuICAgIFwiekluZGV4XCI6IDIwMDAsXG4gICAgXCJwb3NpdGlvblwiOiBcImFic29sdXRlXCIsXG4gICAgXCJsZWZ0XCI6IDAsXG4gICAgXCJyaWdodFwiOiAwLFxuICAgIFwiYm90dG9tXCI6IDAsXG4gICAgXCJoZWlnaHRcIjogNTAwLFxuICAgIFwiYmFja2dyb3VuZENvbG9yXCI6IFwicmdiYSgyNTUsMjU1LDI1NSwxKVwiLFxuICAgIFwiYm9yZGVyVG9wV2lkdGhcIjogMixcbiAgICBcImJvcmRlclRvcENvbG9yXCI6IFwicmdiYSgwLDAsMCwwLjI1KVwiXG4gIH0sXG4gIFwiZGlzdGFuY2Utd3JhcFwiOiB7XG4gICAgXCJmbGV4XCI6IDEsXG4gICAgXCJmbGV4RGlyZWN0aW9uXCI6IFwicm93XCIsXG4gICAgXCJqdXN0aWZ5Q29udGVudFwiOiBcImNlbnRlclwiLFxuICAgIFwiYWxpZ25JdGVtc1wiOiBcImNlbnRlclwiXG4gIH0sXG4gIFwiZGlzdGFuY2VcIjoge1xuICAgIFwiZGlzcGxheVwiOiBcImlubGluZS1ibG9ja1wiLFxuICAgIFwiZm9udFNpemVcIjogOTAsXG4gICAgXCJjb2xvclwiOiBcIiMxMTExMTFcIlxuICB9LFxuICBcInVuaXRcIjoge1xuICAgIFwiZm9udFNpemVcIjogMjIsXG4gICAgXCJjb2xvclwiOiBcIiMzMzMzMzNcIixcbiAgICBcInBhZGRpbmdUb3BcIjogMzAsXG4gICAgXCJwYWRkaW5nTGVmdFwiOiAyMFxuICB9LFxuICBcImRhc2hib2FyZFwiOiB7XG4gICAgXCJmbGV4XCI6IDEsXG4gICAgXCJmbGV4RGlyZWN0aW9uXCI6IFwicm93XCJcbiAgfSxcbiAgXCJkYXNoYm9hcmQtdGl0bGVcIjoge1xuICAgIFwiY29sb3JcIjogXCIjOTk5OTk5XCIsXG4gICAgXCJmb250U2l6ZVwiOiAyNSxcbiAgICBcIm1hcmdpbkJvdHRvbVwiOiAyMFxuICB9LFxuICBcImRhc2hib2FyZC1pdGVtXCI6IHtcbiAgICBcImZsZXhcIjogMSxcbiAgICBcInBhZGRpbmdMZWZ0XCI6IDQwLFxuICAgIFwianVzdGlmeUNvbnRlbnRcIjogXCJjZW50ZXJcIlxuICB9LFxuICBcIm51bWJlci1sZ1wiOiB7XG4gICAgXCJmb250U2l6ZVwiOiA0MixcbiAgICBcImNvbG9yXCI6IFwiIzIyMjIyMlwiXG4gIH0sXG4gIFwiYnRuLXdyYXBcIjoge1xuICAgIFwiZmxleFwiOiAxLFxuICAgIFwiZmxleERpcmVjdGlvblwiOiBcInJvd1wiLFxuICAgIFwiYWxpZ25JdGVtc1wiOiBcImNlbnRlclwiLFxuICAgIFwianVzdGlmeUNvbnRlbnRcIjogXCJjZW50ZXJcIlxuICB9LFxuICBcImJ0bi1jaXJjbGVcIjoge1xuICAgIFwid2lkdGhcIjogMTIwLFxuICAgIFwiaGVpZ2h0XCI6IDEyMCxcbiAgICBcIm1hcmdpbkxlZnRcIjogNDAsXG4gICAgXCJtYXJnaW5SaWdodFwiOiA0MCxcbiAgICBcImJvcmRlclJhZGl1c1wiOiAxMjAsXG4gICAgXCJhbGlnbkl0ZW1zXCI6IFwiY2VudGVyXCIsXG4gICAgXCJqdXN0aWZ5Q29udGVudFwiOiBcImNlbnRlclwiLFxuICAgIFwiYmFja2dyb3VuZENvbG9yXCI6IFwiI2VlZWVlZVwiXG4gIH0sXG4gIFwiYnRuLXRleHRcIjoge1xuICAgIFwiY29sb3JcIjogXCIjZmZmZmZmXCIsXG4gICAgXCJmb250U2l6ZVwiOiAyMFxuICB9LFxuICBcImJ0bi1yZWRcIjoge1xuICAgIFwiYmFja2dyb3VuZENvbG9yXCI6IFwiI2ZmNjI2ZFwiXG4gIH0sXG4gIFwiYnRuLWdyZWVuXCI6IHtcbiAgICBcImJhY2tncm91bmRDb2xvclwiOiBcIiMyMWQ0NWZcIlxuICB9LFxuICBcImJ0bi1taWRuaWdodFwiOiB7XG4gICAgXCJiYWNrZ3JvdW5kQ29sb3JcIjogXCIjMzQ0OTVlXCJcbiAgfVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi93ZWV4LWxvYWRlci9saWIvanNvbi5qcyEuL34vd2VleC1sb2FkZXIvbGliL3N0eWxlLmpzIS4vfi93ZWV4LWxvYWRlci9saWIvZXh0cmFjdC5qcz9pbmRleD0wJnR5cGU9c3R5bGVzIS4vc3JjL3J1bm5pbmcud2Vcbi8vIG1vZHVsZSBpZCA9IDI4XG4vLyBtb2R1bGUgY2h1bmtzID0gNiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICAgIDx3ZWV4LWFtYXAgaWQ9XCJtYXAyMDE3XCIgY2VudGVyPVwie3twb3N9fVwiIGNsYXNzPVwibWFwXCIgc2RrLWtleT1cInt7a2V5c319XCIgem9vbT1cInt7em9vbX19XCI+XG4gICAgICA8d2VleC1hbWFwLXBvbHlsaW5lIHBhdGg9XCJ7e3J1bm5pbmdEYXRhLnBhdGh9fVwiIHN0cm9rZS13aWR0aD1cIjNcIiBzdHJva2U9XCIjMzQ5OGRiXCI+PC93ZWV4LWFtYXAtcG9seWxpbmU+XG4gICAgPC93ZWV4LWFtYXA+XG4gICAgPGRpdiBjbGFzcz1cIm1hcC1jb250cm9sbGVyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZGlzdGFuY2Utd3JhcFwiPlxuICAgICAgICA8dGV4dCBjbGFzcz1cImRpc3RhbmNlXCI+e3t6b29tfX08L3RleHQ+XG4gICAgICAgIDx0ZXh0IGNsYXNzPVwidW5pdFwiPuWFrOmHjDwvdGV4dD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImRhc2hib2FyZFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZGFzaGJvYXJkLWl0ZW1cIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidGltZS13cmFwXCI+XG4gICAgICAgICAgICA8dGV4dCBjbGFzcz1cImRhc2hib2FyZC10aXRsZVwiPui/kOWKqOaXtumXtDwvdGV4dD5cbiAgICAgICAgICAgIDx0ZXh0IGNsYXNzPVwibnVtYmVyLWxnXCI+e3tydW5uaW5nRGF0YS50aW1lfX08L3RleHQ+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZGFzaGJvYXJkLWl0ZW1cIj5cbiAgICAgICAgICA8dGV4dCBjbGFzcz1cImRhc2hib2FyZC10aXRsZVwiPumFjemAnzwvdGV4dD5cbiAgICAgICAgICA8dGV4dCBjbGFzcz1cIm51bWJlci1sZ1wiPnt7cnVubmluZ0RhdGEuc3BlZWR9fTwvdGV4dD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJkYXNoYm9hcmQtaXRlbVwiPlxuICAgICAgICAgIDx0ZXh0IGNsYXNzPVwiZGFzaGJvYXJkLXRpdGxlXCI+54Ot6YePPC90ZXh0PlxuICAgICAgICAgIDx0ZXh0IGNsYXNzPVwibnVtYmVyLWxnXCI+e3tydW5uaW5nRGF0YS5jYWxvcmllc319PC90ZXh0PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImJ0bi13cmFwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJidG4tY2lyY2xlIGJ0bi1ncmVlblwiIGlmPVwie3tzdGF0dXM9PTF9fVwiIG9uY2xpY2s9XCJzdGFydFwiPlxuICAgICAgICAgIDx0ZXh0IGNsYXNzPVwiYnRuLXRleHRcIj7lvIDlp4s8L3RleHQ+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuLWNpcmNsZSBidG4tbWlkbmlnaHRcIiBpZj1cInt7c3RhdHVzPT0yIHx8IHN0YXR1cyA9PSAzfX1cIiBvbmNsaWNrPVwiZW5kXCI+XG4gICAgICAgICAgPHRleHQgY2xhc3M9XCJidG4tdGV4dFwiPue7k+adnzwvdGV4dD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJidG4tY2lyY2xlIGJ0bi1ncmVlblwiIGlmPVwie3tzdGF0dXM9PTN9fVwiIG9uY2xpY2s9XCJjb250aW51ZVwiPlxuICAgICAgICAgIDx0ZXh0IGNsYXNzPVwiYnRuLXRleHRcIj7nu6fnu608L3RleHQ+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuLWNpcmNsZSBidG4tcmVkXCIgaWY9XCJ7e3N0YXR1cz09Mn19XCIgb25jbGljaz1cInN0b3BcIj5cbiAgICAgICAgICA8dGV4dCBjbGFzcz1cImJ0bi10ZXh0XCI+5pqC5YGcPC90ZXh0PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIFxuICAgIDxkaXYgY2xhc3M9XCJjb3VudGRvd24tdmlld1wiIGlmPVwie3tjb3VudGRvd24uc2hvd319XCI+XG4gICAgICA8dGV4dCBjbGFzcz1cImNvdW50ZG93bi10ZXh0XCI+e3tjb3VudGRvd24udGV4dH19PC90ZXh0PlxuICAgIDwvZGl2PlxuICAgIDxzdWNjZXNzIGlmPVwie3tzdGF0dXM9PTR9fVwiIGRhdGE9XCJ7e3J1bm5pbmdEYXRhfX1cIj48L3N1Y2Nlc3M+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHN0eWxlPlxuICAuY29udGFpbmVye1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBmbGV4OiAxO1xuICAgIG1pbi1oZWlnaHQ6IDYwMDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlO1xuICB9XG4gIC5jb3VudGRvd24tdmlld3tcbiAgICB6LWluZGV4OiAyMTAwO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBsZWZ0OiAwO1xuICAgIHJpZ2h0OiAwO1xuICAgIHRvcDogMDtcbiAgICBib3R0b206IDA7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICB9XG4gIC5jb3VudGRvd24tdGV4dHtcbiAgICBjb2xvcjogI2ZmNjU2ZDtcbiAgICBmb250LXNpemU6IDEyMDtcbiAgfVxuICAubWFwe1xuICAgIGZsZXg6IDE7XG4gICAgbWluLWhlaWdodDogNjAwO1xuICB9XG4gIC5tYXAtY29udHJvbGxlcntcbiAgICB6LWluZGV4OiAyMDAwO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBsZWZ0OiAwO1xuICAgIHJpZ2h0OiAwO1xuICAgIGJvdHRvbTogMDtcbiAgICBoZWlnaHQ6IDUwMDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwyNTUsMjU1LDEpO1xuICAgIGJvcmRlci10b3Atd2lkdGg6IDI7XG4gICAgYm9yZGVyLXRvcC1jb2xvcjogcmdiYSgwLDAsMCwuMjUpO1xuICB9XG4gIC5kaXN0YW5jZS13cmFwe1xuICAgIGZsZXg6IDE7XG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB9XG4gIC5kaXN0YW5jZSB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIGZvbnQtc2l6ZTogOTA7XG4gICAgY29sb3I6ICMxMTE7XG4gIH1cbiAgLnVuaXR7XG4gICAgZm9udC1zaXplOiAyMjtcbiAgICBjb2xvcjogIzMzMztcbiAgICBwYWRkaW5nLXRvcDogMzA7XG4gICAgcGFkZGluZy1sZWZ0OiAyMDtcbiAgfVxuICAuZGFzaGJvYXJke1xuICAgIGZsZXg6IDE7XG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgfVxuICAuZGFzaGJvYXJkLXRpdGxle1xuICAgIGNvbG9yOiAjOTk5O1xuICAgIGZvbnQtc2l6ZTogMjU7XG4gICAgbWFyZ2luLWJvdHRvbTogMjA7XG4gIH1cbiAgLmRhc2hib2FyZC1pdGVte1xuICAgIGZsZXg6MTtcbiAgICBwYWRkaW5nLWxlZnQ6IDQwO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICB9XG4gIC5udW1iZXItbGd7XG4gICAgZm9udC1zaXplOiA0MjtcbiAgICBjb2xvcjogIzIyMjIyMjtcbiAgfVxuICBcbiAgLmJ0bi13cmFwe1xuICAgIGZsZXg6IDE7XG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICB9XG4gIC5idG4tY2lyY2xlIHtcbiAgICB3aWR0aDogMTIwO1xuICAgIGhlaWdodDogMTIwO1xuICAgIG1hcmdpbi1sZWZ0OiA0MDtcbiAgICBtYXJnaW4tcmlnaHQ6IDQwO1xuICAgIGJvcmRlci1yYWRpdXM6IDEyMDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNlZWU7XG4gIH1cbiAgLmJ0bi10ZXh0e1xuICAgIGNvbG9yOiNmZmY7XG4gICAgZm9udC1zaXplOiAyMDtcbiAgfVxuICAuYnRuLXJlZHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmY2MjZkO1xuICB9XG4gIC5idG4tZ3JlZW57XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzIxZDQ1ZjtcbiAgfVxuICAuYnRuLW1pZG5pZ2h0e1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMzNDQ5NWU7XG4gIH1cbiAgXG4gIFxuPC9zdHlsZT5cblxuPHNjcmlwdD5cbiAgY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuL2xpYi91dGlscycpO1xuICBjb25zdCBzdGF0dXMgPSByZXF1aXJlKCcuL2xpYi9zdGF0dXMnKTtcbiAgcmVxdWlyZSgnLi9pbmNsdWRlL21lc3NhZ2Uud2UnKTtcbiAgcmVxdWlyZSgnLi9pbmNsdWRlL3VuaXQud2UnKTtcbiAgcmVxdWlyZSgnLi9pbmNsdWRlL3N1Y2Nlc3Mud2UnKTtcbiAgY29uc3Qgc3RvcmFnZSA9IHJlcXVpcmUoJ0B3ZWV4LW1vZHVsZS9zdG9yYWdlJylcbiAgY29uc3QgQW1hcCA9IHJlcXVpcmUoJ0B3ZWV4LW1vZHVsZS9hbWFwJyk7XG4gIFxuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBkYXRhOiB7XG4gICAgICBrZXlzOiB7XG4gICAgICAgIGg1OidmNGI5OWRjZDUxNzUyMTQyZWMwZjFiZGNiOWE4ZWMwMicsXG4gICAgICAgIGlvczogJ2M1NTFmODNlMWU1YjE5YWY4OWM3NDA5NmYxYzBmMDA3JyxcbiAgICAgICAgYW5kcm9pZDogJ2RiNmE5NzMxNTljYjBjMjYzOWFkMDJjNjE3YTc4NmFlJ1xuICAgICAgfSxcbiAgICAgIHpvb206IDE4LFxuICAgICAgcG9zOiBbMTIzLDMzXSxcbiAgICAgIHN0YXR1czogc3RhdHVzWydSVU5OSU5HX1JFQURZJ10sXG4gICAgICBydW5uaW5nRGF0YToge1xuICAgICAgICBkaXN0YW5jZTogMCxcbiAgICAgICAgbWlsZXM6IDAsXG4gICAgICAgIHBhdGg6IFtdLFxuICAgICAgICB0aW1lOiAnMDA6MDA6MDAnLFxuICAgICAgICBzZWNvbmRzOiAwLFxuICAgICAgICBzcGVlZDogMCxcbiAgICAgICAgY2Fsb3JpZXM6IDAsXG4gICAgICB9LFxuICAgICAgbWVzc2FnZTogJ+ato+WcqOi/kOihjCcsXG4gICAgICBjb3VudGRvd246IHtcbiAgICAgICAgdGV4dDogJzMnLFxuICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgIH0sXG4gICAgICAvLyB0d28gdGltZSB0cmlja2VyXG4gICAgICB0aW1lUmVjb3JkZXI6IG51bGwsXG4gICAgICBhbWFwUmVjb3JkZXI6IG51bGwsXG4gICAgICBcbiAgICB9LFxuICAgIFxuICAgIG1ldGhvZHM6IHtcbiAgICAgIHN0YXJ0KCkge1xuICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cy5SVU5OSU5HX0RPSU5HO1xuICAgICAgICB0aGlzLmNvdW50ZG93bi5zaG93ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jb3VudERvd25UaW1lKCk7XG4gICAgICAgIHRoaXMucnVubmluZ0FtYXBHZW9sb2NhdGlvbigpO1xuICAgICAgfSxcbiAgICAgIFxuICAgICAgc3RvcCgpIHtcbiAgICAgICAgdGhpcy5zdGF0c3UgPSBzdGF0dXMuUlVOTklOR19QQVVTRTtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVSZWNvcmRlcik7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5hbWFwUmVjb3JkZXIpO1xuICAgICAgfSxcbiAgICAgIGNvbnRpbnVlKCkge1xuICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cy5SVU5OSU5HX0RPSU5HO1xuICAgICAgICB0aGlzLmNvdW50RG93blRpbWUoKTtcbiAgICAgICAgdGhpcy5ydW5uaW5nQW1hcEdlb2xvY2F0aW9uKCk7XG4gICAgICB9LFxuICAgICAgZW5kKCkge1xuICAgICAgICBjbGVhckludGVydmFsKHRoaXMudGltZVJlY29yZGVyKTtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmFtYXBSZWNvcmRlcik7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICBjb25zb2xlLmxvZygxKVxuICAgICAgICBzdG9yYWdlLmdldEl0ZW0oJ3J1bm5pbmdEYXRhJywgKHJlcykgPT4ge1xuICAgICAgICAgIGxldCBkYXRhID0gW107XG4gICAgICAgICAgaWYgKHJlcy5yZXN1bHQgPT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICAgICAgICAgZGF0YSA9IHJlcy5kYXRhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGF0YS51bnNoaWZ0KHV0aWxzLmV4dGVuZCh7XG4gICAgICAgICAgICBkYXRlOiB1dGlscy5nZXREYXRlKCkucmVwbGFjZSgvXFxzLi8sJycpLFxuICAgICAgICAgICAgc3RhbmRyYW5kRGF0ZTogdXRpbHMuZ2V0RGF0ZSgpXG4gICAgICAgICAgfSwgc2VsZi5ydW5uaW5nRGF0YSkpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpXG4gICAgICAgICAgc3RvcmFnZS5zZXRJdGVtKCdydW5uaW5nRGF0YScsIEpTT04uc3RyaW5naWZ5KGRhdGEpLCAocmVzKSA9PiB7XG4gICAgICAgICAgICBpZihyZXMucmVzdWx0ID09ICdzdWNjZXNzJykge1xuICAgICAgICAgICAgICBzZWxmLnN0YXR1cyA9IHN0YXR1cy5SVU5OSU5HX0VORDsgICAgXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9LFxuICAgICAgXG4gICAgICBzZXRVc2VyTG9jYXRpb24oY2FsbGJhY2spIHtcbiAgICAgICAgQW1hcC5nZXRVc2VyTG9jYXRpb24odGhpcy4kZWwoJ21hcDIwMTcnKS5yZWYsIGNhbGxiYWNrKTtcbiAgICAgIH0sXG4gICAgICBcbiAgICAgIGNvdW50RG93blRpbWUoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXR1cyA9PSBzdGF0dXMuUlVOTklOR19ET0lORykge1xuICAgICAgICAgIHRoaXMuY291bnRkb3duLnNob3cgPSB0cnVlOyAgXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50aW1lUmVjb3JkZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5ydW5uaW5nRGF0YS5zZWNvbmRzICsrO1xuICAgICAgICAgIGlmKHRoaXMucnVubmluZ0RhdGEuc2Vjb25kcyA8PSA0KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5ydW5uaW5nRGF0YS5zZWNvbmRzID09IDMpIHtcbiAgICAgICAgICAgICAgdGhpcy5jb3VudGRvd24udGV4dCA9ICdHTyEnOyAgICBcbiAgICAgICAgICAgIH0gZWxzZSBpZih0aGlzLnJ1bm5pbmdEYXRhLnNlY29uZHMgPT0gNCkge1xuICAgICAgICAgICAgICB0aGlzLmNvdW50ZG93bi5zaG93ID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLmNvdW50ZG93bi50ZXh0ID0gMyAtIHRoaXMucnVubmluZ0RhdGEuc2Vjb25kcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5ydW5uaW5nRGF0YS50aW1lID0gdXRpbHMuc2V0VGltZUZvcm1hdCh0aGlzLnJ1bm5pbmdEYXRhLnNlY29uZHMpO1xuICAgICAgICB9LCAxMDAwKTsgIFxuICAgICAgfSxcbiAgICAgIHJ1bm5pbmdBbWFwR2VvbG9jYXRpb24oKSB7XG4gICAgICAgIHRoaXMuc2V0VXNlckxvY2F0aW9uKChyZXMpID0+IHtcbiAgICAgICAgICBpZihyZXMucmVzdWx0ID09ICdzdWNjZXNzJykge1xuICAgICAgICAgICAgdGhpcy5wb3MgPSByZXMuZGF0YS5wb3NpdGlvbjtcbiAgICAgICAgICAgIHRoaXMucnVubmluZ0RhdGEucGF0aC5wdXNoKHJlcy5kYXRhLnBvc2l0aW9uKTtcbiAgICAgICAgICB9ICBcbiAgICAgICAgfSk7IFxuICAgICAgICB0aGlzLmFtYXBSZWNvcmRlcj0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuc2V0VXNlckxvY2F0aW9uKChyZXMpID0+IHtcbiAgICAgICAgICAgIGlmKHJlcy5yZXN1bHQgPT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICAgICAgICAgIHRoaXMucG9zID0gcmVzLmRhdGEucG9zaXRpb247XG4gICAgICAgICAgICAgIHRoaXMucnVubmluZ0RhdGEucGF0aC5wdXNoKHJlcy5kYXRhLnBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgdGhpcy5jYWxjRGlzdGFuY2VBbmRTcGVlZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9LCAxMDAwMCk7XG4gICAgICB9LFxuICAgICAgY2FsY0Rpc3RhbmNlQW5kU3BlZWQoKSB7XG4gICAgICAgIGNvbnN0IGxlbiA9IHRoaXMucnVubmluZ0RhdGEucGF0aC5sZW5ndGhcbiAgICAgICAgaWYobGVuID4gMSkge1xuICAgICAgICAgIEFtYXAuZ2V0TGluZURpc3RhbmNlKHRoaXMucnVubmluZ0RhdGEucGF0aFtsZW4tMV0sIHRoaXMucnVubmluZ0RhdGEucGF0aFtsZW4tMl0sIChyZXMpID0+IHtcbiAgICAgICAgICAgIGlmKHJlcy5yZXN1bHQgPT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICAgICAgICAgIHRoaXMucnVubmluZ0RhdGEuZGlzdGFuY2UgKz0gcmVzLmRhdGEuZGlzdGFuY2U7XG4gICAgICAgICAgICAgIHRoaXMucnVubmluZ0RhdGEubWlsZXMgPSB0aGlzLnJ1bm5pbmdEYXRhLmRpc3RhbmNlLnRvRml4ZWQoMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJ1bm5pbmdEYXRhLmNhbG9yaWVzID0gKHRoaXMucnVubmluZ0RhdGEuZGlzdGFuY2UgLyAxMDAwKS50b0ZpeGVkKDIpO1xuICAgICAgICAgICAgdGhpcy5ydW5uaW5nRGF0YS5zcGVlZCA9IHV0aWxzLmNhbGNTcGVlZCh0aGlzLnJ1bm5pbmdEYXRhLmRpc3RhbmNlLCB0aGlzLnJ1bm5pbmdEYXRhLnNlY29uZHMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICB9LFxuICB9XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ydW5uaW5nLndlPzZjMjg0MTljIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL2pzb24vc3RyaW5naWZ5XCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeS5qc1xuLy8gbW9kdWxlIGlkID0gMzBcbi8vIG1vZHVsZSBjaHVua3MgPSA2IiwidmFyIGNvcmUgID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpXG4gICwgJEpTT04gPSBjb3JlLkpTT04gfHwgKGNvcmUuSlNPTiA9IHtzdHJpbmdpZnk6IEpTT04uc3RyaW5naWZ5fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgcmV0dXJuICRKU09OLnN0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJndW1lbnRzKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9mbi9qc29uL3N0cmluZ2lmeS5qc1xuLy8gbW9kdWxlIGlkID0gMzFcbi8vIG1vZHVsZSBjaHVua3MgPSA2IiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHt2ZXJzaW9uOiAnMi40LjAnfTtcbmlmKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qc1xuLy8gbW9kdWxlIGlkID0gMzJcbi8vIG1vZHVsZSBjaHVua3MgPSA2IiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIFJVTk5JTkdfUkVBRFk6IDEsXG4gIFJVTk5JTkdfRE9JTkc6IDIsXG4gIFJVTk5JTkdfUEFVU0U6IDMsXG4gIFJVTk5JTkdfRU5EOiA0XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2xpYi9zdGF0dXMuanMiLCJ2YXIgX193ZWV4X3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvd2VleC1sb2FkZXIvbGliL2pzb24uanMhLi4vLi4vbm9kZV9tb2R1bGVzL3dlZXgtbG9hZGVyL2xpYi90ZW1wbGF0ZS5qcyEuLi8uLi9ub2RlX21vZHVsZXMvd2VleC1sb2FkZXIvbGliL2V4dHJhY3QuanM/dHlwZT10ZW1wbGF0ZSEuL21lc3NhZ2Uud2VcIilcbnZhciBfX3dlZXhfc3R5bGVfXyA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy93ZWV4LWxvYWRlci9saWIvanNvbi5qcyEuLi8uLi9ub2RlX21vZHVsZXMvd2VleC1sb2FkZXIvbGliL3N0eWxlLmpzIS4uLy4uL25vZGVfbW9kdWxlcy93ZWV4LWxvYWRlci9saWIvZXh0cmFjdC5qcz9pbmRleD0wJnR5cGU9c3R5bGVzIS4vbWVzc2FnZS53ZVwiKVxudmFyIF9fd2VleF9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy93ZWV4LWxvYWRlci9saWIvc2NyaXB0LmpzIWJhYmVsLWxvYWRlcj9wcmVzZXRzW109L1VzZXJzL2FsaS0xMzAyNTduL3d3dy9hbWFwLXJ1bm5pbmctYXBwL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtZXMyMDE1JnByZXNldHM9L1VzZXJzL2FsaS0xMzAyNTduL3d3dy9hbWFwLXJ1bm5pbmctYXBwL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtZXMyMDE1JnBsdWdpbnNbXT0vVXNlcnMvYWxpLTEzMDI1N24vd3d3L2FtYXAtcnVubmluZy1hcHAvbm9kZV9tb2R1bGVzL2JhYmVsLXBsdWdpbi10cmFuc2Zvcm0tcnVudGltZSZwbHVnaW5zPS9Vc2Vycy9hbGktMTMwMjU3bi93d3cvYW1hcC1ydW5uaW5nLWFwcC9ub2RlX21vZHVsZXMvYmFiZWwtcGx1Z2luLXRyYW5zZm9ybS1ydW50aW1lJmNvbW1lbnRzPWZhbHNlIS4uLy4uL25vZGVfbW9kdWxlcy93ZWV4LWxvYWRlci9saWIvZXh0cmFjdC5qcz9pbmRleD0wJnR5cGU9c2NyaXB0cyEuL21lc3NhZ2Uud2VcIilcblxuX193ZWV4X2RlZmluZV9fKCdAd2VleC1jb21wb25lbnQvbWVzc2FnZScsIFtdLCBmdW5jdGlvbihfX3dlZXhfcmVxdWlyZV9fLCBfX3dlZXhfZXhwb3J0c19fLCBfX3dlZXhfbW9kdWxlX18pIHtcblxuICAgIF9fd2VleF9zY3JpcHRfXyhfX3dlZXhfbW9kdWxlX18sIF9fd2VleF9leHBvcnRzX18sIF9fd2VleF9yZXF1aXJlX18pXG4gICAgaWYgKF9fd2VleF9leHBvcnRzX18uX19lc01vZHVsZSAmJiBfX3dlZXhfZXhwb3J0c19fLmRlZmF1bHQpIHtcbiAgICAgIF9fd2VleF9tb2R1bGVfXy5leHBvcnRzID0gX193ZWV4X2V4cG9ydHNfXy5kZWZhdWx0XG4gICAgfVxuXG4gICAgX193ZWV4X21vZHVsZV9fLmV4cG9ydHMudGVtcGxhdGUgPSBfX3dlZXhfdGVtcGxhdGVfX1xuXG4gICAgX193ZWV4X21vZHVsZV9fLmV4cG9ydHMuc3R5bGUgPSBfX3dlZXhfc3R5bGVfX1xuXG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvaW5jbHVkZS9tZXNzYWdlLndlXG4vLyBtb2R1bGUgaWQgPSAzNFxuLy8gbW9kdWxlIGNodW5rcyA9IDYiLCJ2YXIgX193ZWV4X3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvd2VleC1sb2FkZXIvbGliL2pzb24uanMhLi4vLi4vbm9kZV9tb2R1bGVzL3dlZXgtbG9hZGVyL2xpYi90ZW1wbGF0ZS5qcyEuLi8uLi9ub2RlX21vZHVsZXMvd2VleC1sb2FkZXIvbGliL2V4dHJhY3QuanM/dHlwZT10ZW1wbGF0ZSEuL3N1Y2Nlc3Mud2VcIilcbnZhciBfX3dlZXhfc3R5bGVfXyA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy93ZWV4LWxvYWRlci9saWIvanNvbi5qcyEuLi8uLi9ub2RlX21vZHVsZXMvd2VleC1sb2FkZXIvbGliL3N0eWxlLmpzIS4uLy4uL25vZGVfbW9kdWxlcy93ZWV4LWxvYWRlci9saWIvZXh0cmFjdC5qcz9pbmRleD0wJnR5cGU9c3R5bGVzIS4vc3VjY2Vzcy53ZVwiKVxudmFyIF9fd2VleF9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy93ZWV4LWxvYWRlci9saWIvc2NyaXB0LmpzIWJhYmVsLWxvYWRlcj9wcmVzZXRzW109L1VzZXJzL2FsaS0xMzAyNTduL3d3dy9hbWFwLXJ1bm5pbmctYXBwL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtZXMyMDE1JnByZXNldHM9L1VzZXJzL2FsaS0xMzAyNTduL3d3dy9hbWFwLXJ1bm5pbmctYXBwL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtZXMyMDE1JnBsdWdpbnNbXT0vVXNlcnMvYWxpLTEzMDI1N24vd3d3L2FtYXAtcnVubmluZy1hcHAvbm9kZV9tb2R1bGVzL2JhYmVsLXBsdWdpbi10cmFuc2Zvcm0tcnVudGltZSZwbHVnaW5zPS9Vc2Vycy9hbGktMTMwMjU3bi93d3cvYW1hcC1ydW5uaW5nLWFwcC9ub2RlX21vZHVsZXMvYmFiZWwtcGx1Z2luLXRyYW5zZm9ybS1ydW50aW1lJmNvbW1lbnRzPWZhbHNlIS4uLy4uL25vZGVfbW9kdWxlcy93ZWV4LWxvYWRlci9saWIvZXh0cmFjdC5qcz9pbmRleD0wJnR5cGU9c2NyaXB0cyEuL3N1Y2Nlc3Mud2VcIilcblxuX193ZWV4X2RlZmluZV9fKCdAd2VleC1jb21wb25lbnQvc3VjY2VzcycsIFtdLCBmdW5jdGlvbihfX3dlZXhfcmVxdWlyZV9fLCBfX3dlZXhfZXhwb3J0c19fLCBfX3dlZXhfbW9kdWxlX18pIHtcblxuICAgIF9fd2VleF9zY3JpcHRfXyhfX3dlZXhfbW9kdWxlX18sIF9fd2VleF9leHBvcnRzX18sIF9fd2VleF9yZXF1aXJlX18pXG4gICAgaWYgKF9fd2VleF9leHBvcnRzX18uX19lc01vZHVsZSAmJiBfX3dlZXhfZXhwb3J0c19fLmRlZmF1bHQpIHtcbiAgICAgIF9fd2VleF9tb2R1bGVfXy5leHBvcnRzID0gX193ZWV4X2V4cG9ydHNfXy5kZWZhdWx0XG4gICAgfVxuXG4gICAgX193ZWV4X21vZHVsZV9fLmV4cG9ydHMudGVtcGxhdGUgPSBfX3dlZXhfdGVtcGxhdGVfX1xuXG4gICAgX193ZWV4X21vZHVsZV9fLmV4cG9ydHMuc3R5bGUgPSBfX3dlZXhfc3R5bGVfX1xuXG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvaW5jbHVkZS9zdWNjZXNzLndlXG4vLyBtb2R1bGUgaWQgPSAzNVxuLy8gbW9kdWxlIGNodW5rcyA9IDYiXSwic291cmNlUm9vdCI6IiJ9